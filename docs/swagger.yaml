openapi: 3.0.0
info:
  title: Alagar server API
  version: 1.0.0
security:
- Authorization: []
tags:
- name: Auth
  description: Operations related to user authentication
- name: User
  description: Operations related to user management
- name: Auto
  description: Operations related to Auto management
- name: Wheel
  description: Operations related to wheel management
- name: Sensor
  description: Operations related to sensor data
- name: Data
  description: Operations related to data 
- name: Driver
  description: Operations related to driver management 
- name: Position
  description: Operations related to position management 
- name: Notifications
  description: Operations related to notifications management 
- name: Breakage
  description: Operations related to breakage  management
- name: Report
  description: Operations for generating reports
  
paths:
  /login:
    post:
      tags:
      - Auth
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "201":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
      security: []
  /refresh:
    post:
      tags:
      - Auth
      summary: Refresh access token
      responses:
        "201":
          description: Successful token refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /user:
    put:
      tags:
      - User
      summary: Update user password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
        required: true
      responses:
        "200":
          description: Successful password update
    post:
      tags:
      - User
      summary: User registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      responses:
        "201":
          description: Successful registration
      security: []
    get:
      tags:
      - User
      summary: Get user details
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
  /userinfo:
    put:
      tags:
      - User
      summary: Update user details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      responses:
        "200":
          description: User details updated successfully
        "400":
          description: Invalid input
        "404":
          description: User not found
        "500":
          description: Internal server error 
  /sensors:
    get:
      tags:
        - Sensor
      summary: Provides actual data by car ID
      parameters:
        - name: car_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Sensor data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SensorsData'
  /sensordata:
    post:
      tags:
        - Sensor
      summary: Update an existing sensor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSensorData'
        required: true
      responses:
        "201":
          description: Successful sensor update
  /pressuredata:
    get:
      tags:
        - Data
      summary: Get data by wheel ID
      parameters:
        - name: wheel_id
          in: query
          required: true
          schema:
            type: string
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Sensor data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PressureData'
  /temperaturedata:
    get:
      tags:
        - Data
      summary: Get data by wheel ID
      parameters:
        - name: wheel_id
          in: query
          required: true
          schema:
            type: string
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Sensor data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TemperatureData'
  /report:
    get:
      tags:
      - Report
      summary: Generate report
      responses:
        "200":
          description: Report in XLSX format
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                $ref: '#/components/schemas/ReportResponse'
  /auto/list:
    get:
      tags:
        - Auto
      summary: Get list of Autos
      parameters:
        - name: offset
          in: query
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of Autos
          content:
            application/json:
              schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/AutoResponse'
  /auto/info:
    get:
      tags:
        - Auto
      summary: Get Auto and its wheels by car ID
      parameters:
        - name: car_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Auto details and associated wheels
          content:
            application/json:
              schema:
                type: object
                properties:
                  auto:
                    $ref: '#/components/schemas/AutoResponse'
                  wheels:
                    type: array
                    items:
                      $ref: '#/components/schemas/WheelResponse'
  /auto:
    get:
      tags:
        - Auto
      summary: Get a single Auto by ID
      parameters:
        - name: car_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Vehicle details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutoResponse'
    post:
      tags:
      - Auto
      summary: Register a Auto
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoRegistration'
        required: true
      responses:
        "201":
          description: Successful Auto registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutoResponse'
  /wheels:
    put:
      tags:
      - Wheel
      summary: Update wheel data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WheelChange'
        required: true
      responses:
        "200":
          description: Successful wheel update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WheelResponse'
    post:
      tags:
      - Wheel
      summary: Register a wheel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WheelRegistration'
        required: true
      responses:
        "201":
          description: Successful wheel registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WheelResponse'
    get:
      tags:
      - Wheel
      summary: Get wheel data
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Wheel data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WheelResponse'
  /wheels/{state_number}:
    get:
      tags:
        - Wheel
      summary: Get wheels by state number
      parameters:
        - name: state_number
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of wheels associated with the given state number
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WheelsDataForDevice'
  /driver:
    post:
      tags:
        - Driver
      summary: Add a driver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverRegistration'
        required: true
      responses:
        "201":
          description: Driver successfully added
       

  /driver/list:
    get:
      tags:
        - Driver
      summary: Drivers info
      parameters:
        - name: offset
          in: query
          required: true
          description: Pagination offset
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: true
          description: Pagination limit
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of drivers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverStatisticsResponse'
       

  /driver/info:
    get:
      tags:
        - Driver
      summary: Driver information
      parameters:
        - name: driver_id
          in: query
          required: true
          description: Unique driver identifier
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Driver information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverInfoResponse'
       

  /driver/worktime:
    put:
      tags:
        - Driver
      summary: Update the driver's worked hours
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkTimeUpdateRequest'
        required: true
      responses:
        "200":
          description: Worked minutes successfully updated

  /position:
    post:
      tags:
        - Position
      summary: Add car position from MQTT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionRequest'
        required: true
      responses:
        "201":
          description: Car position successfully updated

  /position/listcurrent:
    get:
      tags:
        - Position
      summary: Get current car positions
      parameters:
        - name: whatshere[pointA]
          in: query
          required: true
          description: Point A 
          schema:
            $ref: '#/components/schemas/Point'
        - name: whatshere[pointB]
          in: query
          required: true
          description: Point B 
          schema:
            $ref: '#/components/schemas/Point'
      responses:
        "200":
          description: List of current car positions within the defined region
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PositionCurrentListResponse'

  /positions/listcars:
    get:
      tags:
        - Position
      summary: Get list of cars
      parameters:
        - name: limit
          in: query
          required: true
          description: Limit for pagination
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          required: true
          description: Offset for pagination
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: List of cars for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PositionCarListResponse'

  /position/carroute:
    get:
      tags:
        - Position
      summary: Get the route of a car
      parameters:
        - name: car_id
          in: query
          required: true
          description: Unique identifier for the car
          schema:
            type: string
            format: uuid
        - name: time_from
          in: query
          required: true
          description: Start time for the route data
          schema:
            type: string
            format: date-time
        - name: time_to
          in: query
          required: true
          description: End time for the route data
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: List of route points for the specified time period
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/RouteCarResponse'

  /notification/list:
    get:
      tags:
        - Notifications
      summary: Get list of notifications based on status
      parameters:
        - name: status
          in: query
          required: true
          description: Status of notifications 
          schema:
            type: string
        - name: limit
          in: query
          required: true
          description: Limit for pagination
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          required: true
          description: Offset for pagination
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: List of notifications with the requested status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationListResponse'

  /notification/info:
    get:
      tags:
        - Notifications
      summary: Get detailed information about a specific notification
      parameters:
        - name: id
          in: query
          required: true
          description: Unique identifier of the notification
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Detailed information about the notification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationInfoResponse'

  /notification/status:
    put:
      tags:
        - Notifications
      summary: Change the status of a specific notification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeNotificationStatusRequest'
        required: true
      responses:
        "200":
          description: Status of the notification updated successfully

  /notification/allstatus:
    put:
      tags:
        - Notifications
      summary: Change the status of all notifications for a specific user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAllNotificationsStatusRequest'
        required: true
      responses:
        "200":
          description: Status of all notifications updated successfully

  /mileage:
    put:
      tags:
        - Auto
      summary: Update car mileage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMileageRequest'
        required: true
      responses:
        "200":
          description: Mileage successfully updated

  /breakage:
    post:
      tags:
        - Breakage
      summary: Add a new breakage from MQTT data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreakageFromMqttRequest'
        required: true
      responses:
        "201":
          description: Breakage successfully created

  /breakage/list:
    get:
      tags:
        - Breakage
      summary: Get a list of breakages for a specific car
      parameters:
        - name: car_id
          in: query
          required: true
          description: Unique identifier for the car
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of breakages for the car
          content:
            application/json:
              schema:   
                type: array
                items:
                    $ref: '#/components/schemas/BreakageListResponse'

components:
  schemas:
    BreakageFromMqttRequest:
      type: object
      required:
        - device_num
        - type
        - description
        - datetime
        - point
      properties:
        device_num:
          type: string
          description: The device number of the car
        type:
          type: string
          description: Type of the breakage (e.g., "Engine failure", "Tire puncture")
        description:
          type: string
          description: Detailed description of the breakage
        datetime:
          type: string
          format: date-time
          description: The date and time when the breakage occurred
        point:
          type: array
          items:
            type: number
            format: float
          minItems: 2
          maxItems: 2
          description: Latitude and longitude of the breakage location
      example:
        device_num: "123ABC"
        type: "Tire puncture"
        description: "Flat tire on the front left side"
        datetime: "2024-12-20T12:00:00Z"
        point: [61.591456, 56.905609]

    BreakageListResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the breakage
        stateNumber:
          type: string
          description: State number of the car
        type:
          type: string
          description: Type of the breakage (e.g., "Engine failure", "Tire puncture")
        description:
          type: string
          description: Detailed description of the breakage
        datetime:
          type: string
          format: date-time
          description: Date and time when the breakage occurred
        driver_name:
          type: string
          description: Full name of the driver associated with the breakage
      example:
        - id: "f47c8fc0-efb0-4df0-8e4f-319b3f2d447d"
          stateNumber: "A123BC"
          type: "Tire puncture"
          description: "Flat tire on the front left side"
          datetime: "2024-12-20T12:00:00Z"
          driver_name: "John Doe"
        - id: "e8f9f3f0-b3e1-4db9-a734-4264a0df574f"
          stateNumber: "B456DF"
          type: "Engine failure"
          description: "Overheated engine, requires repair"
          datetime: "2024-12-21T14:30:00Z"
          driver_name: "Jane Smith"

    UpdateMileageRequest:
      type: object
      required:
        - device_num
        - new_mileage
      properties:
        device_num:
          type: string
          description: The device number of the car to update mileage for
        new_mileage:
          type: number
          format: float
          description: The new mileage to set for the car

    NotificationListResponse:
      type: object
      required:
        - id
        - state_number
        - brand
        - breakage_type
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the notification
        state_number:
          type: string
          description: State number of the car
        brand:
          type: string
          description: Brand of the car
        breakage_type:
          type: string
          description: Type of the breakage
        created_at:
          type: string
          format: date-time
          description: Date and time when the notification was created
      example:
        state_number: "A123BC"
        brand: "Toyota"
        breakage_type: "Engine failure"
        created_at: "2024-12-20T12:00:00Z"
        id: "f47c8fc0-efb0-4df0-8e4f-319b3f2d447d"

    NotificationInfoResponse:
      type: object
      required:
        - description
        - driver_name
        - location
        - created_at
      properties:
        description:
          type: string
          description: Detailed description of the breakage
        driver_name:
          type: string
          description: Full name of the driver associated with the breakage
        location:
          type: array
          items:
            type: number
            format: float
          minItems: 2
          maxItems: 2
          description: Latitude and longitude of the breakage location
        created_at:
            type: string
            format: date-time
            description: Date and time when the notification was created
      example:
        description: "Flat tire on the front left side"
        driver_name: "John Doe"
        location: [61.591456, 56.905609]
        created_at: "2024-12-20T12:00:00Z"

    ChangeNotificationStatusRequest:
      type: object
      required:
        - id
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the notification
        status:
          type: string
          description: The new status
      example:
        id: "f47c8fc0-efb0-4df0-8e4f-319b3f2d447d"
        status: "new"

    ChangeAllNotificationsStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          description: The new status
      example:
        status: "new"

    PositionRequest:
      type: object
      required:
        - device_number
        - point
        - created_at
      properties:
        device_number:
          type: string
          description: The device number of the car
        point:
          type: array
          items:
            type: number
            format: float
            minItems: 2
            maxItems: 2
        created_at:
          type: string
          format: date-time
          description: The timestamp when the position was recorded
      example:
        device_number: "123ABC"
        point: [40.7128, -74.0060] 
        created_at: "2024-12-20T12:34:56Z"

    PositionCurrentListResponse:
      type: object
      required:
        - car_id
        - point
        - unique_id
      properties:
        point:
          type: array
          items:
            type: number
            format: float
            minItems: 2
            maxItems: 2
        unique_id:
          type: string
          description: Unique identifier of the car
        car_id:
          type: string
          format: uuid
          description: Car's unique identifier

    PositionCarListResponse:
      type: object
      properties:
        state_number:
          type: string
          description: State number of the car
        unique_id:
          type: string
          description: Unique identifier of the car
        brand:
          type: string
          description: Brand of the car
        car_id:
          type: string
          format: uuid
          description: Unique identifier of the car

    RouteCarResponse:
      type: object
      required:
        - state_number
        - unique_id
        - brand
        - car_id
        - positions
      properties:
        state_number:
          type: string
          description: State number of the car
        unique_id:
          type: string
          description: Unique identifier of the car
        brand:
          type: string
          description: Brand of the car
        car_id:
          type: string
          format: uuid
          description: Unique identifier of the car
        positions:
          type: array
          description: List of car positions with timestamps
          items:
            $ref: '#/components/schemas/Position'
            
    Position:
      type: object
      required:
        - point
        - created_at
      properties:
        point:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
          description: Coordinates [latitude, longitude]
        created_at:
          type: string
          format: date-time
          description: Timestamp when the position was recorded

    Point:
      type: array
      items:
        type: number
        format: float
      minItems: 2
      maxItems: 2
      description: A point in the format "latitude,longitude" representing the geographical coordinates.
      example: [61.591456, 56.905609]

    LoginRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    TokenResponse:
      required:
      - accessToken
      - refreshToken
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    UserRegistration:
      required:
      - inn
      - email
      - firstName
      - lastName
      - password
      - phone
      - gender
      - timeZone
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
        phone:
          type: string
        email:
          type: string
        timeZone:
          type: integer
        inn:
          type: string
        password:
          type: string
    UserDetails:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
        phone:
          type: string
        email:
          type: string
        timeZone:
          type: integer
        inn:
          type: string
        password:
          type: string
    UpdatePassword:
      required:
      - newPassword
      type: object
      properties:
        newPassword:
          type: string
    ReportResponse:
      type: string
      format: byte
    AutoRegistration:
      required:
      - axleCount
      - brand
      - deviceNumber
      - stateNumber
      - uniqueId
      - autoType
      type: object
      properties:
        deviceNumber:
          type: string
        uniqueId:
          type: string
        autoType:
          type: string
        stateNumber:
          type: string
        brand:
          type: string
        axleCount:
          type: integer
    AutoResponse:
      type: object
      properties:
        id:
          type: string
        deviceNumber:
          type: string
        uniqueId:
          type: string
        autoType:
          type: string
        stateNumber:
          type: string
        brand:
          type: string
        axleCount:
          type: integer
    WheelRegistration:
      required:
      - axleNumber
      - maxPressure
      - maxTemperature
      - mileage
      - minPressure
      - minTemperature
      - sensorNumber
      - tireBrand
      - tireCost
      - tireModel
      - tireSize
      - autoId
      - wheelPosition
      - ngp
      - tkvh
      type: object
      properties:
        autoId:
          type: string
        axleNumber:
          type: integer
        wheelPosition:
          type: integer
        sensorNumber:
          type: string
        tireSize:
          type: number
        tireCost:
          type: number
        tireBrand:
          type: string
        tireModel:
          type: string
        minPressure:
          type: number
        mileage:
          type: number
        maxPressure:
          type: number
        minTemperature:
          type: number
        maxTemperature:
          type: number
        ngp:
          type: number
        tkvh:
          type: number
    WheelChange:
      required:
      - id
      - axleNumber
      - maxPressure
      - maxTemperature
      - mileage
      - minPressure
      - minTemperature
      - sensorNumber
      - tireBrand
      - tireCost
      - tireModel
      - tireSize
      - autoId
      - wheelPosition
      - ngp
      - tkvh
      type: object
      properties:
        id:
          type: string
        autoId:
          type: string
        axleNumber:
          type: integer
        wheelPosition:
          type: integer
        sensorNumber:
          type: string
        tireSize:
          type: number
        tireCost:
          type: number
        tireBrand:
          type: string
        tireModel:
          type: string
        minPressure:
          type: number
        mileage:
          type: number
        maxPressure:
          type: number
        minTemperature:
          type: number
        maxTemperature:
          type: number
        ngp:
          type: number
        tkvh:
          type: number
    WheelsDataForDevice:
      type: object
      properties:
        wheel_position:
          type: integer
        sensor_number:
          type: string
        min_pressure:
          type: number
        min_temperature:
          type: number
        max_pressure:
          type: number
        max_temperature:
          type: number
      example:
        wheel_position: 1
        sensor_number: "1a23b"
        min_pressure: 12.34
        min_temperature: 12.34
        max_pressure: 56.78
        max_temperature: 56.78
    WheelResponse:
      type: object
      properties:
        id:
          type: string
        autoId:
          type: string
        axleNumber:
          type: integer
        wheelPosition:
          type: integer
        sensorNumber:
          type: string
        tireSize:
          type: number
        tireCost:
          type: number
        tireBrand:
          type: string
        tireModel:
          type: string
        minPressure:
          type: number
        mileage:
          type: number
        maxPressure:
          type: number
        minTemperature:
          type: number
        maxTemperature:
          type: number
        ngp:
          type: number
        tkvh:
          type: number
      example:
        axleNumber: 0
        maxTemperature: 9.30
        tireBrand: tireBrand
        tireModel: tireModel
        minTemperature: 7.06
        wheelPosition: 6
        minPressure: 5.96
        sensorNumber: sensorNumber
        maxPressure: 2.30
        id: id
        autoId: autoId
        tireCost: 1.46
        tireSize: tireSize
        mileage: 5.63
        ngp: 0.1
        tkvh: 0.3

    SensorsData:
      type: object
      properties:
        wheel_position:
          type: integer
        pressure:
          type: number
        temperature:
          type: number
    NewSensorData:
      type: object
      properties:
        device_number:
          type: string
        sensor_number:
          type: string
        pressure:
          type: number
        temperature:
          type: number
        time:
          type: string
          format: date-time
    PressureData:
      type: object
      properties:
        pressure:
          type: number
        time:
          type: string
          format: date-time
          
    TemperatureData:
      type: object
      properties:
        temperature:
          type: number
        time:
          type: string
          format: date-time
          
    DriverRegistration:
      type: object
      required:
        - name
        - surname
        - middle_name
        - phone
        - birthday
        - state_number
      properties:
        name:
          type: string
          description: Driver's first name
        surname:
          type: string
          description: Driver's last name
        middle_name:
          type: string
          description: Driver's middle name
        phone:
          type: string
          description: Driver's phone number
        birthday:
          type: string
          format: date
          description: Driver's birth date
        state_number:
          type: string
          description: Vehicle's state number

    DriverStatisticsResponse:
      type: object
      required:
      - full_name
      - worked_time
      - experience
      - rating
      - breakages_count
      - driver_id
      properties:
        full_name:
          type: string
        worked_time:
          type: integer
        experience:
          type: number
          format: float
        rating:
          type: number
          format: float
        breakages_count:
          type: integer
        driver_id:
          type: string
          format: uuid

    DriverInfoResponse:
      type: object
      required:
        - name
        - surname
        - middle_name
        - phone
        - birthday
      properties:
        name:
          type: string
        surname:
          type: string
        middle_name:
          type: string
        phone:
          type: string
        birthday:
          type: string
          format: date-time

    WorkTimeUpdateRequest:
      type: object
      required:
        - device_num
        - worked_time
      properties:
        device_num:
          type: string
        worked_time:
          type: integer

  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT