// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AuthorizationScopes = "Authorization.Scopes"
)

// AutoRegistration defines model for AutoRegistration.
type AutoRegistration struct {
	AutoType     string `json:"autoType"`
	AxleCount    int    `json:"axleCount"`
	Brand        string `json:"brand"`
	DeviceNumber string `json:"deviceNumber"`
	StateNumber  string `json:"stateNumber"`
	UniqueId     string `json:"uniqueId"`
}

// AutoResponse defines model for AutoResponse.
type AutoResponse struct {
	AutoType     *string `json:"autoType,omitempty"`
	AxleCount    *int    `json:"axleCount,omitempty"`
	Brand        *string `json:"brand,omitempty"`
	DeviceNumber *string `json:"deviceNumber,omitempty"`
	Id           *string `json:"id,omitempty"`
	StateNumber  *string `json:"stateNumber,omitempty"`
	UniqueId     *string `json:"uniqueId,omitempty"`
}

// BreakageFromMqttRequest defines model for BreakageFromMqttRequest.
type BreakageFromMqttRequest struct {
	// Datetime The date and time when the breakage occurred
	Datetime time.Time `json:"datetime"`

	// Description Detailed description of the breakage
	Description string `json:"description"`

	// DeviceNum The device number of the car
	DeviceNum string `json:"device_num"`

	// Latitude Latitude of the breakage location
	Latitude float32 `json:"latitude"`

	// Longitude Longitude of the breakage location
	Longitude float32 `json:"longitude"`

	// Type Type of the breakage (e.g., "Engine failure", "Tire puncture")
	Type string `json:"type"`
}

// BreakageListResponse defines model for BreakageListResponse.
type BreakageListResponse = []struct {
	// Datetime Date and time when the breakage occurred
	Datetime *time.Time `json:"datetime,omitempty"`

	// Description Detailed description of the breakage
	Description *string `json:"description,omitempty"`

	// DriverName Full name of the driver associated with the breakage
	DriverName *string `json:"driver_name,omitempty"`

	// Id Unique identifier for the breakage
	Id *openapi_types.UUID `json:"id,omitempty"`

	// StateNumber State number of the car
	StateNumber *string `json:"stateNumber,omitempty"`

	// Type Type of the breakage (e.g., "Engine failure", "Tire puncture")
	Type *string `json:"type,omitempty"`
}

// ChangeAllNotificationsStatusRequest defines model for ChangeAllNotificationsStatusRequest.
type ChangeAllNotificationsStatusRequest struct {
	// Status The new status
	Status string `json:"status"`

	// UserId Unique identifier of the user
	UserId openapi_types.UUID `json:"user_id"`
}

// ChangeNotificationStatusRequest defines model for ChangeNotificationStatusRequest.
type ChangeNotificationStatusRequest struct {
	// Id Unique identifier of the notification
	Id openapi_types.UUID `json:"id"`

	// Status The new status
	Status string `json:"status"`
}

// DriverInfoResponse defines model for DriverInfoResponse.
type DriverInfoResponse struct {
	Birthday   openapi_types.Date `json:"birthday"`
	MiddleName string             `json:"middle_name"`
	Name       string             `json:"name"`
	Phone      string             `json:"phone"`
	Surname    string             `json:"surname"`
}

// DriverRegistration defines model for DriverRegistration.
type DriverRegistration struct {
	// Birthday Driver's birth date
	Birthday openapi_types.Date `json:"birthday"`

	// MiddleName Driver's middle name
	MiddleName string `json:"middle_name"`

	// Name Driver's first name
	Name string `json:"name"`

	// Phone Driver's phone number
	Phone string `json:"phone"`

	// StateNumber Vehicle's state number
	StateNumber string `json:"state_number"`

	// Surname Driver's last name
	Surname string `json:"surname"`
}

// DriverStatisticsResponse defines model for DriverStatisticsResponse.
type DriverStatisticsResponse struct {
	BreakagesCount int                `json:"breakages_count"`
	DriverId       openapi_types.UUID `json:"driver_id"`
	Experience     float32            `json:"experience"`
	FullName       string             `json:"full_name"`
	Rating         float32            `json:"rating"`
	WorkedTime     int                `json:"worked_time"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// NewSensorData defines model for NewSensorData.
type NewSensorData struct {
	DeviceNumber *string    `json:"device_number,omitempty"`
	Pressure     *float32   `json:"pressure,omitempty"`
	SensorNumber *string    `json:"sensor_number,omitempty"`
	Temperature  *float32   `json:"temperature,omitempty"`
	Time         *time.Time `json:"time,omitempty"`
}

// NotificationInfoResponse defines model for NotificationInfoResponse.
type NotificationInfoResponse struct {
	// Description Detailed description of the breakage
	Description *string `json:"description,omitempty"`

	// DriverName Full name of the driver associated with the breakage
	DriverName *string `json:"driver_name,omitempty"`

	// Location Latitude and longitude of the breakage location
	Location *[]float32 `json:"location,omitempty"`
}

// NotificationListResponse defines model for NotificationListResponse.
type NotificationListResponse = []struct {
	// Brand Brand of the car
	Brand *string `json:"brand,omitempty"`

	// BreakageType Type of the breakage
	BreakageType *string `json:"breakage_type,omitempty"`

	// Id Unique identifier for the notification
	Id *openapi_types.UUID `json:"id,omitempty"`

	// StateNumber State number of the car
	StateNumber *string `json:"state_number,omitempty"`

	// Timestamp Date and time when the notification was created
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// Point A point in the format "latitude,longitude" representing the geographical coordinates.
type Point = []float32

// PositionCarListResponse defines model for PositionCarListResponse.
type PositionCarListResponse = []struct {
	// Brand Brand of the car
	Brand *string `json:"brand,omitempty"`

	// CarId Unique identifier of the car
	CarId *openapi_types.UUID `json:"car_id,omitempty"`

	// StateNumber State number of the car
	StateNumber *string `json:"state_number,omitempty"`

	// UniqueId Unique identifier of the car
	UniqueId *string `json:"unique_id,omitempty"`
}

// PositionCarRouteResponse defines model for PositionCarRouteResponse.
type PositionCarRouteResponse = []struct {
	Point *[]float32 `json:"point,omitempty"`

	// Timestamp The timestamp when the position was recorded
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// PositionCurrentListResponse defines model for PositionCurrentListResponse.
type PositionCurrentListResponse = []struct {
	// CarId Car's unique identifier
	CarId *openapi_types.UUID `json:"car_id,omitempty"`
	Point *[]float32          `json:"point,omitempty"`

	// UniqueId Unique identifier of the car
	UniqueId *string `json:"unique_id,omitempty"`
}

// PositionRequest defines model for PositionRequest.
type PositionRequest struct {
	// DeviceNumber The device number of the car
	DeviceNumber string    `json:"device_number"`
	Point        []float32 `json:"point"`

	// Timestamp The timestamp when the position was recorded
	Timestamp time.Time `json:"timestamp"`
}

// PressureData defines model for PressureData.
type PressureData struct {
	Pressure *float32   `json:"pressure,omitempty"`
	Time     *time.Time `json:"time,omitempty"`
}

// ReportResponse defines model for ReportResponse.
type ReportResponse = []byte

// SensorsData defines model for SensorsData.
type SensorsData struct {
	Pressure      *float32 `json:"pressure,omitempty"`
	Temperature   *float32 `json:"temperature,omitempty"`
	WheelPosition *int     `json:"wheel_position,omitempty"`
}

// TemperatureData defines model for TemperatureData.
type TemperatureData struct {
	Temperature *float32   `json:"temperature,omitempty"`
	Time        *time.Time `json:"time,omitempty"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

// UpdateMileageRequest defines model for UpdateMileageRequest.
type UpdateMileageRequest struct {
	// DeviceNum The device number of the car to update mileage for
	DeviceNum string `json:"device_num"`

	// NewMileage The new mileage to set for the car
	NewMileage float32 `json:"new_mileage"`
}

// UpdatePassword defines model for UpdatePassword.
type UpdatePassword struct {
	NewPassword string `json:"newPassword"`
}

// UserDetails defines model for UserDetails.
type UserDetails struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Gender    *string `json:"gender,omitempty"`
	Inn       *string `json:"inn,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`
	TimeZone  *int    `json:"timeZone,omitempty"`
}

// UserRegistration defines model for UserRegistration.
type UserRegistration struct {
	Email     string `json:"email"`
	FirstName string `json:"firstName"`
	Gender    string `json:"gender"`
	Inn       string `json:"inn"`
	LastName  string `json:"lastName"`
	Password  string `json:"password"`
	Phone     string `json:"phone"`
	TimeZone  int    `json:"timeZone"`
}

// WheelChange defines model for WheelChange.
type WheelChange struct {
	AutoId         string  `json:"autoId"`
	AxleNumber     int     `json:"axleNumber"`
	Id             string  `json:"id"`
	MaxPressure    float32 `json:"maxPressure"`
	MaxTemperature float32 `json:"maxTemperature"`
	Mileage        float32 `json:"mileage"`
	MinPressure    float32 `json:"minPressure"`
	MinTemperature float32 `json:"minTemperature"`
	Ngp            float32 `json:"ngp"`
	SensorNumber   string  `json:"sensorNumber"`
	TireBrand      string  `json:"tireBrand"`
	TireCost       float32 `json:"tireCost"`
	TireModel      string  `json:"tireModel"`
	TireSize       float32 `json:"tireSize"`
	Tkvh           float32 `json:"tkvh"`
	WheelPosition  int     `json:"wheelPosition"`
}

// WheelRegistration defines model for WheelRegistration.
type WheelRegistration struct {
	AutoId         string  `json:"autoId"`
	AxleNumber     int     `json:"axleNumber"`
	MaxPressure    float32 `json:"maxPressure"`
	MaxTemperature float32 `json:"maxTemperature"`
	Mileage        float32 `json:"mileage"`
	MinPressure    float32 `json:"minPressure"`
	MinTemperature float32 `json:"minTemperature"`
	Ngp            float32 `json:"ngp"`
	SensorNumber   string  `json:"sensorNumber"`
	TireBrand      string  `json:"tireBrand"`
	TireCost       float32 `json:"tireCost"`
	TireModel      string  `json:"tireModel"`
	TireSize       float32 `json:"tireSize"`
	Tkvh           float32 `json:"tkvh"`
	WheelPosition  int     `json:"wheelPosition"`
}

// WheelResponse defines model for WheelResponse.
type WheelResponse struct {
	AutoId         *string  `json:"autoId,omitempty"`
	AxleNumber     *int     `json:"axleNumber,omitempty"`
	Id             *string  `json:"id,omitempty"`
	MaxPressure    *float32 `json:"maxPressure,omitempty"`
	MaxTemperature *float32 `json:"maxTemperature,omitempty"`
	Mileage        *float32 `json:"mileage,omitempty"`
	MinPressure    *float32 `json:"minPressure,omitempty"`
	MinTemperature *float32 `json:"minTemperature,omitempty"`
	Ngp            *float32 `json:"ngp,omitempty"`
	SensorNumber   *string  `json:"sensorNumber,omitempty"`
	TireBrand      *string  `json:"tireBrand,omitempty"`
	TireCost       *float32 `json:"tireCost,omitempty"`
	TireModel      *string  `json:"tireModel,omitempty"`
	TireSize       *float32 `json:"tireSize,omitempty"`
	Tkvh           *float32 `json:"tkvh,omitempty"`
	WheelPosition  *int     `json:"wheelPosition,omitempty"`
}

// WheelsDataForDevice defines model for WheelsDataForDevice.
type WheelsDataForDevice struct {
	MaxPressure    *float32 `json:"max_pressure,omitempty"`
	MaxTemperature *float32 `json:"max_temperature,omitempty"`
	MinPressure    *float32 `json:"min_pressure,omitempty"`
	MinTemperature *float32 `json:"min_temperature,omitempty"`
	SensorNumber   *string  `json:"sensor_number,omitempty"`
	WheelPosition  *int     `json:"wheel_position,omitempty"`
}

// WorkTimeUpdateRequest defines model for WorkTimeUpdateRequest.
type WorkTimeUpdateRequest struct {
	DeviceNum  string `json:"device_num"`
	WorkedTime int    `json:"worked_time"`
}

// GetAutoParams defines parameters for GetAuto.
type GetAutoParams struct {
	CarId string `form:"car_id" json:"car_id"`
}

// GetAutoInfoParams defines parameters for GetAutoInfo.
type GetAutoInfoParams struct {
	CarId string `form:"car_id" json:"car_id"`
}

// GetAutoListParams defines parameters for GetAutoList.
type GetAutoListParams struct {
	Offset int `form:"offset" json:"offset"`
	Limit  int `form:"limit" json:"limit"`
}

// GetBreakageListParams defines parameters for GetBreakageList.
type GetBreakageListParams struct {
	// CarId Unique identifier for the car
	CarId openapi_types.UUID `form:"car_id" json:"car_id"`
}

// GetDriverInfoParams defines parameters for GetDriverInfo.
type GetDriverInfoParams struct {
	// DriverId Unique driver identifier
	DriverId openapi_types.UUID `form:"driver_id" json:"driver_id"`
}

// GetDriverListParams defines parameters for GetDriverList.
type GetDriverListParams struct {
	// Offset Pagination offset
	Offset int `form:"offset" json:"offset"`

	// Limit Pagination limit
	Limit int `form:"limit" json:"limit"`
}

// GetNotificationInfoParams defines parameters for GetNotificationInfo.
type GetNotificationInfoParams struct {
	// Id Unique identifier of the notification
	Id openapi_types.UUID `form:"id" json:"id"`
}

// GetNotificationListParams defines parameters for GetNotificationList.
type GetNotificationListParams struct {
	// Status Status of notifications
	Status string `form:"status" json:"status"`

	// Limit Limit for pagination
	Limit int `form:"limit" json:"limit"`

	// Offset Offset for pagination
	Offset int `form:"offset" json:"offset"`
}

// GetPositionCarrouteParams defines parameters for GetPositionCarroute.
type GetPositionCarrouteParams struct {
	// CarId Unique identifier for the car
	CarId openapi_types.UUID `form:"car_id" json:"car_id"`

	// TimeFrom Start time for the route data
	TimeFrom time.Time `form:"time_from" json:"time_from"`

	// TimeTo End time for the route data
	TimeTo time.Time `form:"time_to" json:"time_to"`
}

// GetPositionListcurrentParams defines parameters for GetPositionListcurrent.
type GetPositionListcurrentParams struct {
	// WhatsherePointA Point A
	WhatsherePointA Point `form:"whatshere[pointA]" json:"whatshere[pointA]"`

	// WhatsherePointB Point B
	WhatsherePointB Point `form:"whatshere[pointB]" json:"whatshere[pointB]"`
}

// GetPositionsListcarsParams defines parameters for GetPositionsListcars.
type GetPositionsListcarsParams struct {
	// Limit Limit for pagination
	Limit int `form:"limit" json:"limit"`

	// Offset Offset for pagination
	Offset int `form:"offset" json:"offset"`
}

// GetPressuredataParams defines parameters for GetPressuredata.
type GetPressuredataParams struct {
	WheelId string    `form:"wheel_id" json:"wheel_id"`
	From    time.Time `form:"from" json:"from"`
	To      time.Time `form:"to" json:"to"`
}

// GetSensorsParams defines parameters for GetSensors.
type GetSensorsParams struct {
	CarId string `form:"car_id" json:"car_id"`
}

// GetTemperaturedataParams defines parameters for GetTemperaturedata.
type GetTemperaturedataParams struct {
	WheelId string    `form:"wheel_id" json:"wheel_id"`
	From    time.Time `form:"from" json:"from"`
	To      time.Time `form:"to" json:"to"`
}

// GetWheelsParams defines parameters for GetWheels.
type GetWheelsParams struct {
	Id string `form:"id" json:"id"`
}

// PostAutoJSONRequestBody defines body for PostAuto for application/json ContentType.
type PostAutoJSONRequestBody = AutoRegistration

// PostBreakageJSONRequestBody defines body for PostBreakage for application/json ContentType.
type PostBreakageJSONRequestBody = BreakageFromMqttRequest

// PostDriverJSONRequestBody defines body for PostDriver for application/json ContentType.
type PostDriverJSONRequestBody = DriverRegistration

// PutDriverWorktimeJSONRequestBody defines body for PutDriverWorktime for application/json ContentType.
type PutDriverWorktimeJSONRequestBody = WorkTimeUpdateRequest

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// PutMileageJSONRequestBody defines body for PutMileage for application/json ContentType.
type PutMileageJSONRequestBody = UpdateMileageRequest

// PutNotificationAllstatusJSONRequestBody defines body for PutNotificationAllstatus for application/json ContentType.
type PutNotificationAllstatusJSONRequestBody = ChangeAllNotificationsStatusRequest

// PutNotificationStatusJSONRequestBody defines body for PutNotificationStatus for application/json ContentType.
type PutNotificationStatusJSONRequestBody = ChangeNotificationStatusRequest

// PostPositionJSONRequestBody defines body for PostPosition for application/json ContentType.
type PostPositionJSONRequestBody = PositionRequest

// PostSensordataJSONRequestBody defines body for PostSensordata for application/json ContentType.
type PostSensordataJSONRequestBody = NewSensorData

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody = UserRegistration

// PutUserJSONRequestBody defines body for PutUser for application/json ContentType.
type PutUserJSONRequestBody = UpdatePassword

// PostWheelsJSONRequestBody defines body for PostWheels for application/json ContentType.
type PostWheelsJSONRequestBody = WheelRegistration

// PutWheelsJSONRequestBody defines body for PutWheels for application/json ContentType.
type PutWheelsJSONRequestBody = WheelChange

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a single Auto by ID
	// (GET /auto)
	GetAuto(w http.ResponseWriter, r *http.Request, params GetAutoParams)
	// Register a Auto
	// (POST /auto)
	PostAuto(w http.ResponseWriter, r *http.Request)
	// Get Auto and its wheels by car ID
	// (GET /auto/info)
	GetAutoInfo(w http.ResponseWriter, r *http.Request, params GetAutoInfoParams)
	// Get list of Autos
	// (GET /auto/list)
	GetAutoList(w http.ResponseWriter, r *http.Request, params GetAutoListParams)
	// Add a new breakage from MQTT data
	// (POST /breakage)
	PostBreakage(w http.ResponseWriter, r *http.Request)
	// Get a list of breakages for a specific car
	// (GET /breakage/list)
	GetBreakageList(w http.ResponseWriter, r *http.Request, params GetBreakageListParams)
	// Add a driver
	// (POST /driver)
	PostDriver(w http.ResponseWriter, r *http.Request)
	// Driver information
	// (GET /driver/info)
	GetDriverInfo(w http.ResponseWriter, r *http.Request, params GetDriverInfoParams)
	// Drivers info
	// (GET /driver/list)
	GetDriverList(w http.ResponseWriter, r *http.Request, params GetDriverListParams)
	// Update the driver's worked hours
	// (PUT /driver/worktime)
	PutDriverWorktime(w http.ResponseWriter, r *http.Request)
	// User login
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)
	// Update car mileage
	// (PUT /mileage)
	PutMileage(w http.ResponseWriter, r *http.Request)
	// Change the status of all notifications for a specific user
	// (PUT /notification/allstatus)
	PutNotificationAllstatus(w http.ResponseWriter, r *http.Request)
	// Get detailed information about a specific notification
	// (GET /notification/info)
	GetNotificationInfo(w http.ResponseWriter, r *http.Request, params GetNotificationInfoParams)
	// Get list of notifications based on status
	// (GET /notification/list)
	GetNotificationList(w http.ResponseWriter, r *http.Request, params GetNotificationListParams)
	// Change the status of a specific notification
	// (PUT /notification/status)
	PutNotificationStatus(w http.ResponseWriter, r *http.Request)
	// Add car position from MQTT
	// (POST /position)
	PostPosition(w http.ResponseWriter, r *http.Request)
	// Get the route of a car
	// (GET /position/carroute)
	GetPositionCarroute(w http.ResponseWriter, r *http.Request, params GetPositionCarrouteParams)
	// Get current car positions
	// (GET /position/listcurrent)
	GetPositionListcurrent(w http.ResponseWriter, r *http.Request, params GetPositionListcurrentParams)
	// Get list of cars
	// (GET /positions/listcars)
	GetPositionsListcars(w http.ResponseWriter, r *http.Request, params GetPositionsListcarsParams)
	// Get data by wheel ID
	// (GET /pressuredata)
	GetPressuredata(w http.ResponseWriter, r *http.Request, params GetPressuredataParams)
	// Refresh access token
	// (POST /refresh)
	PostRefresh(w http.ResponseWriter, r *http.Request)
	// Generate report
	// (GET /report)
	GetReport(w http.ResponseWriter, r *http.Request)
	// Update an existing sensor
	// (POST /sensordata)
	PostSensordata(w http.ResponseWriter, r *http.Request)
	// Provides actual data by car ID
	// (GET /sensors)
	GetSensors(w http.ResponseWriter, r *http.Request, params GetSensorsParams)
	// Get data by wheel ID
	// (GET /temperaturedata)
	GetTemperaturedata(w http.ResponseWriter, r *http.Request, params GetTemperaturedataParams)
	// Get user details
	// (GET /user)
	GetUser(w http.ResponseWriter, r *http.Request)
	// User registration
	// (POST /user)
	PostUser(w http.ResponseWriter, r *http.Request)
	// Update user password
	// (PUT /user)
	PutUser(w http.ResponseWriter, r *http.Request)
	// Get wheel data
	// (GET /wheels)
	GetWheels(w http.ResponseWriter, r *http.Request, params GetWheelsParams)
	// Register a wheel
	// (POST /wheels)
	PostWheels(w http.ResponseWriter, r *http.Request)
	// Update wheel data
	// (PUT /wheels)
	PutWheels(w http.ResponseWriter, r *http.Request)
	// Get wheels by state number
	// (GET /wheels/{state_number})
	GetWheelsStateNumber(w http.ResponseWriter, r *http.Request, stateNumber string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get a single Auto by ID
// (GET /auto)
func (_ Unimplemented) GetAuto(w http.ResponseWriter, r *http.Request, params GetAutoParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a Auto
// (POST /auto)
func (_ Unimplemented) PostAuto(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Auto and its wheels by car ID
// (GET /auto/info)
func (_ Unimplemented) GetAutoInfo(w http.ResponseWriter, r *http.Request, params GetAutoInfoParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of Autos
// (GET /auto/list)
func (_ Unimplemented) GetAutoList(w http.ResponseWriter, r *http.Request, params GetAutoListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new breakage from MQTT data
// (POST /breakage)
func (_ Unimplemented) PostBreakage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a list of breakages for a specific car
// (GET /breakage/list)
func (_ Unimplemented) GetBreakageList(w http.ResponseWriter, r *http.Request, params GetBreakageListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a driver
// (POST /driver)
func (_ Unimplemented) PostDriver(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Driver information
// (GET /driver/info)
func (_ Unimplemented) GetDriverInfo(w http.ResponseWriter, r *http.Request, params GetDriverInfoParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Drivers info
// (GET /driver/list)
func (_ Unimplemented) GetDriverList(w http.ResponseWriter, r *http.Request, params GetDriverListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the driver's worked hours
// (PUT /driver/worktime)
func (_ Unimplemented) PutDriverWorktime(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User login
// (POST /login)
func (_ Unimplemented) PostLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update car mileage
// (PUT /mileage)
func (_ Unimplemented) PutMileage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change the status of all notifications for a specific user
// (PUT /notification/allstatus)
func (_ Unimplemented) PutNotificationAllstatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get detailed information about a specific notification
// (GET /notification/info)
func (_ Unimplemented) GetNotificationInfo(w http.ResponseWriter, r *http.Request, params GetNotificationInfoParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of notifications based on status
// (GET /notification/list)
func (_ Unimplemented) GetNotificationList(w http.ResponseWriter, r *http.Request, params GetNotificationListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change the status of a specific notification
// (PUT /notification/status)
func (_ Unimplemented) PutNotificationStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add car position from MQTT
// (POST /position)
func (_ Unimplemented) PostPosition(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the route of a car
// (GET /position/carroute)
func (_ Unimplemented) GetPositionCarroute(w http.ResponseWriter, r *http.Request, params GetPositionCarrouteParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current car positions
// (GET /position/listcurrent)
func (_ Unimplemented) GetPositionListcurrent(w http.ResponseWriter, r *http.Request, params GetPositionListcurrentParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of cars
// (GET /positions/listcars)
func (_ Unimplemented) GetPositionsListcars(w http.ResponseWriter, r *http.Request, params GetPositionsListcarsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get data by wheel ID
// (GET /pressuredata)
func (_ Unimplemented) GetPressuredata(w http.ResponseWriter, r *http.Request, params GetPressuredataParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Refresh access token
// (POST /refresh)
func (_ Unimplemented) PostRefresh(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Generate report
// (GET /report)
func (_ Unimplemented) GetReport(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing sensor
// (POST /sensordata)
func (_ Unimplemented) PostSensordata(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Provides actual data by car ID
// (GET /sensors)
func (_ Unimplemented) GetSensors(w http.ResponseWriter, r *http.Request, params GetSensorsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get data by wheel ID
// (GET /temperaturedata)
func (_ Unimplemented) GetTemperaturedata(w http.ResponseWriter, r *http.Request, params GetTemperaturedataParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user details
// (GET /user)
func (_ Unimplemented) GetUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User registration
// (POST /user)
func (_ Unimplemented) PostUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user password
// (PUT /user)
func (_ Unimplemented) PutUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get wheel data
// (GET /wheels)
func (_ Unimplemented) GetWheels(w http.ResponseWriter, r *http.Request, params GetWheelsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a wheel
// (POST /wheels)
func (_ Unimplemented) PostWheels(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update wheel data
// (PUT /wheels)
func (_ Unimplemented) PutWheels(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get wheels by state number
// (GET /wheels/{state_number})
func (_ Unimplemented) GetWheelsStateNumber(w http.ResponseWriter, r *http.Request, stateNumber string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAuto operation middleware
func (siw *ServerInterfaceWrapper) GetAuto(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAutoParams

	// ------------- Required query parameter "car_id" -------------

	if paramValue := r.URL.Query().Get("car_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "car_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "car_id", r.URL.Query(), &params.CarId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "car_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuto(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuto operation middleware
func (siw *ServerInterfaceWrapper) PostAuto(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuto(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAutoInfo operation middleware
func (siw *ServerInterfaceWrapper) GetAutoInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAutoInfoParams

	// ------------- Required query parameter "car_id" -------------

	if paramValue := r.URL.Query().Get("car_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "car_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "car_id", r.URL.Query(), &params.CarId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "car_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAutoInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAutoList operation middleware
func (siw *ServerInterfaceWrapper) GetAutoList(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAutoListParams

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAutoList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostBreakage operation middleware
func (siw *ServerInterfaceWrapper) PostBreakage(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBreakage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBreakageList operation middleware
func (siw *ServerInterfaceWrapper) GetBreakageList(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBreakageListParams

	// ------------- Required query parameter "car_id" -------------

	if paramValue := r.URL.Query().Get("car_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "car_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "car_id", r.URL.Query(), &params.CarId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "car_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBreakageList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDriver operation middleware
func (siw *ServerInterfaceWrapper) PostDriver(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDriver(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDriverInfo operation middleware
func (siw *ServerInterfaceWrapper) GetDriverInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDriverInfoParams

	// ------------- Required query parameter "driver_id" -------------

	if paramValue := r.URL.Query().Get("driver_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "driver_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "driver_id", r.URL.Query(), &params.DriverId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "driver_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDriverInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDriverList operation middleware
func (siw *ServerInterfaceWrapper) GetDriverList(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDriverListParams

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDriverList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutDriverWorktime operation middleware
func (siw *ServerInterfaceWrapper) PutDriverWorktime(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutDriverWorktime(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutMileage operation middleware
func (siw *ServerInterfaceWrapper) PutMileage(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutMileage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutNotificationAllstatus operation middleware
func (siw *ServerInterfaceWrapper) PutNotificationAllstatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutNotificationAllstatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNotificationInfo operation middleware
func (siw *ServerInterfaceWrapper) GetNotificationInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNotificationInfoParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotificationInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNotificationList operation middleware
func (siw *ServerInterfaceWrapper) GetNotificationList(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNotificationListParams

	// ------------- Required query parameter "status" -------------

	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "status"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotificationList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutNotificationStatus operation middleware
func (siw *ServerInterfaceWrapper) PutNotificationStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutNotificationStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPosition operation middleware
func (siw *ServerInterfaceWrapper) PostPosition(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPosition(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPositionCarroute operation middleware
func (siw *ServerInterfaceWrapper) GetPositionCarroute(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPositionCarrouteParams

	// ------------- Required query parameter "car_id" -------------

	if paramValue := r.URL.Query().Get("car_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "car_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "car_id", r.URL.Query(), &params.CarId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "car_id", Err: err})
		return
	}

	// ------------- Required query parameter "time_from" -------------

	if paramValue := r.URL.Query().Get("time_from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "time_from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "time_from", r.URL.Query(), &params.TimeFrom)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time_from", Err: err})
		return
	}

	// ------------- Required query parameter "time_to" -------------

	if paramValue := r.URL.Query().Get("time_to"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "time_to"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "time_to", r.URL.Query(), &params.TimeTo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time_to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPositionCarroute(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPositionListcurrent operation middleware
func (siw *ServerInterfaceWrapper) GetPositionListcurrent(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPositionListcurrentParams

	// ------------- Required query parameter "whatshere[pointA]" -------------

	if paramValue := r.URL.Query().Get("whatshere[pointA]"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "whatshere[pointA]"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "whatshere[pointA]", r.URL.Query(), &params.WhatsherePointA)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "whatshere[pointA]", Err: err})
		return
	}

	// ------------- Required query parameter "whatshere[pointB]" -------------

	if paramValue := r.URL.Query().Get("whatshere[pointB]"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "whatshere[pointB]"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "whatshere[pointB]", r.URL.Query(), &params.WhatsherePointB)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "whatshere[pointB]", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPositionListcurrent(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPositionsListcars operation middleware
func (siw *ServerInterfaceWrapper) GetPositionsListcars(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPositionsListcarsParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPositionsListcars(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPressuredata operation middleware
func (siw *ServerInterfaceWrapper) GetPressuredata(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPressuredataParams

	// ------------- Required query parameter "wheel_id" -------------

	if paramValue := r.URL.Query().Get("wheel_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "wheel_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "wheel_id", r.URL.Query(), &params.WheelId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wheel_id", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Required query parameter "to" -------------

	if paramValue := r.URL.Query().Get("to"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "to"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPressuredata(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostRefresh(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReport operation middleware
func (siw *ServerInterfaceWrapper) GetReport(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSensordata operation middleware
func (siw *ServerInterfaceWrapper) PostSensordata(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSensordata(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSensors operation middleware
func (siw *ServerInterfaceWrapper) GetSensors(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSensorsParams

	// ------------- Required query parameter "car_id" -------------

	if paramValue := r.URL.Query().Get("car_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "car_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "car_id", r.URL.Query(), &params.CarId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "car_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSensors(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTemperaturedata operation middleware
func (siw *ServerInterfaceWrapper) GetTemperaturedata(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTemperaturedataParams

	// ------------- Required query parameter "wheel_id" -------------

	if paramValue := r.URL.Query().Get("wheel_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "wheel_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "wheel_id", r.URL.Query(), &params.WheelId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wheel_id", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Required query parameter "to" -------------

	if paramValue := r.URL.Query().Get("to"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "to"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemperaturedata(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutUser operation middleware
func (siw *ServerInterfaceWrapper) PutUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWheels operation middleware
func (siw *ServerInterfaceWrapper) GetWheels(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWheelsParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWheels(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostWheels operation middleware
func (siw *ServerInterfaceWrapper) PostWheels(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostWheels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutWheels operation middleware
func (siw *ServerInterfaceWrapper) PutWheels(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutWheels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWheelsStateNumber operation middleware
func (siw *ServerInterfaceWrapper) GetWheelsStateNumber(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "state_number" -------------
	var stateNumber string

	err = runtime.BindStyledParameterWithOptions("simple", "state_number", chi.URLParam(r, "state_number"), &stateNumber, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state_number", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWheelsStateNumber(w, r, stateNumber)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auto", wrapper.GetAuto)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auto", wrapper.PostAuto)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auto/info", wrapper.GetAutoInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auto/list", wrapper.GetAutoList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/breakage", wrapper.PostBreakage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/breakage/list", wrapper.GetBreakageList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/driver", wrapper.PostDriver)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/driver/info", wrapper.GetDriverInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/driver/list", wrapper.GetDriverList)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/driver/worktime", wrapper.PutDriverWorktime)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.PostLogin)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/mileage", wrapper.PutMileage)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/notification/allstatus", wrapper.PutNotificationAllstatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/notification/info", wrapper.GetNotificationInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/notification/list", wrapper.GetNotificationList)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/notification/status", wrapper.PutNotificationStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/position", wrapper.PostPosition)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/position/carroute", wrapper.GetPositionCarroute)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/position/listcurrent", wrapper.GetPositionListcurrent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/positions/listcars", wrapper.GetPositionsListcars)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pressuredata", wrapper.GetPressuredata)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/refresh", wrapper.PostRefresh)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/report", wrapper.GetReport)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sensordata", wrapper.PostSensordata)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sensors", wrapper.GetSensors)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/temperaturedata", wrapper.GetTemperaturedata)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user", wrapper.PostUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user", wrapper.PutUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wheels", wrapper.GetWheels)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/wheels", wrapper.PostWheels)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/wheels", wrapper.PutWheels)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wheels/{state_number}", wrapper.GetWheelsStateNumber)
	})

	return r
}

type GetAutoRequestObject struct {
	Params GetAutoParams
}

type GetAutoResponseObject interface {
	VisitGetAutoResponse(w http.ResponseWriter) error
}

type GetAuto200JSONResponse AutoResponse

func (response GetAuto200JSONResponse) VisitGetAutoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAutoRequestObject struct {
	Body *PostAutoJSONRequestBody
}

type PostAutoResponseObject interface {
	VisitPostAutoResponse(w http.ResponseWriter) error
}

type PostAuto201JSONResponse AutoResponse

func (response PostAuto201JSONResponse) VisitPostAutoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetAutoInfoRequestObject struct {
	Params GetAutoInfoParams
}

type GetAutoInfoResponseObject interface {
	VisitGetAutoInfoResponse(w http.ResponseWriter) error
}

type GetAutoInfo200JSONResponse struct {
	Auto   *AutoResponse    `json:"auto,omitempty"`
	Wheels *[]WheelResponse `json:"wheels,omitempty"`
}

func (response GetAutoInfo200JSONResponse) VisitGetAutoInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAutoListRequestObject struct {
	Params GetAutoListParams
}

type GetAutoListResponseObject interface {
	VisitGetAutoListResponse(w http.ResponseWriter) error
}

type GetAutoList200JSONResponse []AutoResponse

func (response GetAutoList200JSONResponse) VisitGetAutoListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBreakageRequestObject struct {
	Body *PostBreakageJSONRequestBody
}

type PostBreakageResponseObject interface {
	VisitPostBreakageResponse(w http.ResponseWriter) error
}

type PostBreakage201Response struct {
}

func (response PostBreakage201Response) VisitPostBreakageResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type GetBreakageListRequestObject struct {
	Params GetBreakageListParams
}

type GetBreakageListResponseObject interface {
	VisitGetBreakageListResponse(w http.ResponseWriter) error
}

type GetBreakageList200JSONResponse BreakageListResponse

func (response GetBreakageList200JSONResponse) VisitGetBreakageListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDriverRequestObject struct {
	Body *PostDriverJSONRequestBody
}

type PostDriverResponseObject interface {
	VisitPostDriverResponse(w http.ResponseWriter) error
}

type PostDriver201Response struct {
}

func (response PostDriver201Response) VisitPostDriverResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type GetDriverInfoRequestObject struct {
	Params GetDriverInfoParams
}

type GetDriverInfoResponseObject interface {
	VisitGetDriverInfoResponse(w http.ResponseWriter) error
}

type GetDriverInfo200JSONResponse DriverInfoResponse

func (response GetDriverInfo200JSONResponse) VisitGetDriverInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDriverListRequestObject struct {
	Params GetDriverListParams
}

type GetDriverListResponseObject interface {
	VisitGetDriverListResponse(w http.ResponseWriter) error
}

type GetDriverList200JSONResponse []DriverStatisticsResponse

func (response GetDriverList200JSONResponse) VisitGetDriverListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutDriverWorktimeRequestObject struct {
	Body *PutDriverWorktimeJSONRequestBody
}

type PutDriverWorktimeResponseObject interface {
	VisitPutDriverWorktimeResponse(w http.ResponseWriter) error
}

type PutDriverWorktime200Response struct {
}

func (response PutDriverWorktime200Response) VisitPutDriverWorktimeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin201JSONResponse TokenResponse

func (response PostLogin201JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PutMileageRequestObject struct {
	Body *PutMileageJSONRequestBody
}

type PutMileageResponseObject interface {
	VisitPutMileageResponse(w http.ResponseWriter) error
}

type PutMileage200Response struct {
}

func (response PutMileage200Response) VisitPutMileageResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutNotificationAllstatusRequestObject struct {
	Body *PutNotificationAllstatusJSONRequestBody
}

type PutNotificationAllstatusResponseObject interface {
	VisitPutNotificationAllstatusResponse(w http.ResponseWriter) error
}

type PutNotificationAllstatus200Response struct {
}

func (response PutNotificationAllstatus200Response) VisitPutNotificationAllstatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetNotificationInfoRequestObject struct {
	Params GetNotificationInfoParams
}

type GetNotificationInfoResponseObject interface {
	VisitGetNotificationInfoResponse(w http.ResponseWriter) error
}

type GetNotificationInfo200JSONResponse NotificationInfoResponse

func (response GetNotificationInfo200JSONResponse) VisitGetNotificationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNotificationListRequestObject struct {
	Params GetNotificationListParams
}

type GetNotificationListResponseObject interface {
	VisitGetNotificationListResponse(w http.ResponseWriter) error
}

type GetNotificationList200JSONResponse NotificationListResponse

func (response GetNotificationList200JSONResponse) VisitGetNotificationListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutNotificationStatusRequestObject struct {
	Body *PutNotificationStatusJSONRequestBody
}

type PutNotificationStatusResponseObject interface {
	VisitPutNotificationStatusResponse(w http.ResponseWriter) error
}

type PutNotificationStatus200Response struct {
}

func (response PutNotificationStatus200Response) VisitPutNotificationStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPositionRequestObject struct {
	Body *PostPositionJSONRequestBody
}

type PostPositionResponseObject interface {
	VisitPostPositionResponse(w http.ResponseWriter) error
}

type PostPosition201Response struct {
}

func (response PostPosition201Response) VisitPostPositionResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type GetPositionCarrouteRequestObject struct {
	Params GetPositionCarrouteParams
}

type GetPositionCarrouteResponseObject interface {
	VisitGetPositionCarrouteResponse(w http.ResponseWriter) error
}

type GetPositionCarroute200JSONResponse PositionCarRouteResponse

func (response GetPositionCarroute200JSONResponse) VisitGetPositionCarrouteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPositionListcurrentRequestObject struct {
	Params GetPositionListcurrentParams
}

type GetPositionListcurrentResponseObject interface {
	VisitGetPositionListcurrentResponse(w http.ResponseWriter) error
}

type GetPositionListcurrent200JSONResponse PositionCurrentListResponse

func (response GetPositionListcurrent200JSONResponse) VisitGetPositionListcurrentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPositionsListcarsRequestObject struct {
	Params GetPositionsListcarsParams
}

type GetPositionsListcarsResponseObject interface {
	VisitGetPositionsListcarsResponse(w http.ResponseWriter) error
}

type GetPositionsListcars200JSONResponse PositionCarListResponse

func (response GetPositionsListcars200JSONResponse) VisitGetPositionsListcarsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPressuredataRequestObject struct {
	Params GetPressuredataParams
}

type GetPressuredataResponseObject interface {
	VisitGetPressuredataResponse(w http.ResponseWriter) error
}

type GetPressuredata200JSONResponse []PressureData

func (response GetPressuredata200JSONResponse) VisitGetPressuredataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRefreshRequestObject struct {
}

type PostRefreshResponseObject interface {
	VisitPostRefreshResponse(w http.ResponseWriter) error
}

type PostRefresh201JSONResponse TokenResponse

func (response PostRefresh201JSONResponse) VisitPostRefreshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetReportRequestObject struct {
}

type GetReportResponseObject interface {
	VisitGetReportResponse(w http.ResponseWriter) error
}

type GetReport200ApplicationvndOpenxmlformatsOfficedocumentSpreadsheetmlSheetResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetReport200ApplicationvndOpenxmlformatsOfficedocumentSpreadsheetmlSheetResponse) VisitGetReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostSensordataRequestObject struct {
	Body *PostSensordataJSONRequestBody
}

type PostSensordataResponseObject interface {
	VisitPostSensordataResponse(w http.ResponseWriter) error
}

type PostSensordata201Response struct {
}

func (response PostSensordata201Response) VisitPostSensordataResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type GetSensorsRequestObject struct {
	Params GetSensorsParams
}

type GetSensorsResponseObject interface {
	VisitGetSensorsResponse(w http.ResponseWriter) error
}

type GetSensors200JSONResponse []SensorsData

func (response GetSensors200JSONResponse) VisitGetSensorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTemperaturedataRequestObject struct {
	Params GetTemperaturedataParams
}

type GetTemperaturedataResponseObject interface {
	VisitGetTemperaturedataResponse(w http.ResponseWriter) error
}

type GetTemperaturedata200JSONResponse []TemperatureData

func (response GetTemperaturedata200JSONResponse) VisitGetTemperaturedataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse UserDetails

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserRequestObject struct {
	Body *PostUserJSONRequestBody
}

type PostUserResponseObject interface {
	VisitPostUserResponse(w http.ResponseWriter) error
}

type PostUser201Response struct {
}

func (response PostUser201Response) VisitPostUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PutUserRequestObject struct {
	Body *PutUserJSONRequestBody
}

type PutUserResponseObject interface {
	VisitPutUserResponse(w http.ResponseWriter) error
}

type PutUser200Response struct {
}

func (response PutUser200Response) VisitPutUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetWheelsRequestObject struct {
	Params GetWheelsParams
}

type GetWheelsResponseObject interface {
	VisitGetWheelsResponse(w http.ResponseWriter) error
}

type GetWheels200JSONResponse WheelResponse

func (response GetWheels200JSONResponse) VisitGetWheelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostWheelsRequestObject struct {
	Body *PostWheelsJSONRequestBody
}

type PostWheelsResponseObject interface {
	VisitPostWheelsResponse(w http.ResponseWriter) error
}

type PostWheels201JSONResponse WheelResponse

func (response PostWheels201JSONResponse) VisitPostWheelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PutWheelsRequestObject struct {
	Body *PutWheelsJSONRequestBody
}

type PutWheelsResponseObject interface {
	VisitPutWheelsResponse(w http.ResponseWriter) error
}

type PutWheels200JSONResponse WheelResponse

func (response PutWheels200JSONResponse) VisitPutWheelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWheelsStateNumberRequestObject struct {
	StateNumber string `json:"state_number"`
}

type GetWheelsStateNumberResponseObject interface {
	VisitGetWheelsStateNumberResponse(w http.ResponseWriter) error
}

type GetWheelsStateNumber200JSONResponse []WheelsDataForDevice

func (response GetWheelsStateNumber200JSONResponse) VisitGetWheelsStateNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get a single Auto by ID
	// (GET /auto)
	GetAuto(ctx context.Context, request GetAutoRequestObject) (GetAutoResponseObject, error)
	// Register a Auto
	// (POST /auto)
	PostAuto(ctx context.Context, request PostAutoRequestObject) (PostAutoResponseObject, error)
	// Get Auto and its wheels by car ID
	// (GET /auto/info)
	GetAutoInfo(ctx context.Context, request GetAutoInfoRequestObject) (GetAutoInfoResponseObject, error)
	// Get list of Autos
	// (GET /auto/list)
	GetAutoList(ctx context.Context, request GetAutoListRequestObject) (GetAutoListResponseObject, error)
	// Add a new breakage from MQTT data
	// (POST /breakage)
	PostBreakage(ctx context.Context, request PostBreakageRequestObject) (PostBreakageResponseObject, error)
	// Get a list of breakages for a specific car
	// (GET /breakage/list)
	GetBreakageList(ctx context.Context, request GetBreakageListRequestObject) (GetBreakageListResponseObject, error)
	// Add a driver
	// (POST /driver)
	PostDriver(ctx context.Context, request PostDriverRequestObject) (PostDriverResponseObject, error)
	// Driver information
	// (GET /driver/info)
	GetDriverInfo(ctx context.Context, request GetDriverInfoRequestObject) (GetDriverInfoResponseObject, error)
	// Drivers info
	// (GET /driver/list)
	GetDriverList(ctx context.Context, request GetDriverListRequestObject) (GetDriverListResponseObject, error)
	// Update the driver's worked hours
	// (PUT /driver/worktime)
	PutDriverWorktime(ctx context.Context, request PutDriverWorktimeRequestObject) (PutDriverWorktimeResponseObject, error)
	// User login
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
	// Update car mileage
	// (PUT /mileage)
	PutMileage(ctx context.Context, request PutMileageRequestObject) (PutMileageResponseObject, error)
	// Change the status of all notifications for a specific user
	// (PUT /notification/allstatus)
	PutNotificationAllstatus(ctx context.Context, request PutNotificationAllstatusRequestObject) (PutNotificationAllstatusResponseObject, error)
	// Get detailed information about a specific notification
	// (GET /notification/info)
	GetNotificationInfo(ctx context.Context, request GetNotificationInfoRequestObject) (GetNotificationInfoResponseObject, error)
	// Get list of notifications based on status
	// (GET /notification/list)
	GetNotificationList(ctx context.Context, request GetNotificationListRequestObject) (GetNotificationListResponseObject, error)
	// Change the status of a specific notification
	// (PUT /notification/status)
	PutNotificationStatus(ctx context.Context, request PutNotificationStatusRequestObject) (PutNotificationStatusResponseObject, error)
	// Add car position from MQTT
	// (POST /position)
	PostPosition(ctx context.Context, request PostPositionRequestObject) (PostPositionResponseObject, error)
	// Get the route of a car
	// (GET /position/carroute)
	GetPositionCarroute(ctx context.Context, request GetPositionCarrouteRequestObject) (GetPositionCarrouteResponseObject, error)
	// Get current car positions
	// (GET /position/listcurrent)
	GetPositionListcurrent(ctx context.Context, request GetPositionListcurrentRequestObject) (GetPositionListcurrentResponseObject, error)
	// Get list of cars
	// (GET /positions/listcars)
	GetPositionsListcars(ctx context.Context, request GetPositionsListcarsRequestObject) (GetPositionsListcarsResponseObject, error)
	// Get data by wheel ID
	// (GET /pressuredata)
	GetPressuredata(ctx context.Context, request GetPressuredataRequestObject) (GetPressuredataResponseObject, error)
	// Refresh access token
	// (POST /refresh)
	PostRefresh(ctx context.Context, request PostRefreshRequestObject) (PostRefreshResponseObject, error)
	// Generate report
	// (GET /report)
	GetReport(ctx context.Context, request GetReportRequestObject) (GetReportResponseObject, error)
	// Update an existing sensor
	// (POST /sensordata)
	PostSensordata(ctx context.Context, request PostSensordataRequestObject) (PostSensordataResponseObject, error)
	// Provides actual data by car ID
	// (GET /sensors)
	GetSensors(ctx context.Context, request GetSensorsRequestObject) (GetSensorsResponseObject, error)
	// Get data by wheel ID
	// (GET /temperaturedata)
	GetTemperaturedata(ctx context.Context, request GetTemperaturedataRequestObject) (GetTemperaturedataResponseObject, error)
	// Get user details
	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// User registration
	// (POST /user)
	PostUser(ctx context.Context, request PostUserRequestObject) (PostUserResponseObject, error)
	// Update user password
	// (PUT /user)
	PutUser(ctx context.Context, request PutUserRequestObject) (PutUserResponseObject, error)
	// Get wheel data
	// (GET /wheels)
	GetWheels(ctx context.Context, request GetWheelsRequestObject) (GetWheelsResponseObject, error)
	// Register a wheel
	// (POST /wheels)
	PostWheels(ctx context.Context, request PostWheelsRequestObject) (PostWheelsResponseObject, error)
	// Update wheel data
	// (PUT /wheels)
	PutWheels(ctx context.Context, request PutWheelsRequestObject) (PutWheelsResponseObject, error)
	// Get wheels by state number
	// (GET /wheels/{state_number})
	GetWheelsStateNumber(ctx context.Context, request GetWheelsStateNumberRequestObject) (GetWheelsStateNumberResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAuto operation middleware
func (sh *strictHandler) GetAuto(w http.ResponseWriter, r *http.Request, params GetAutoParams) {
	var request GetAutoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuto(ctx, request.(GetAutoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuto")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAutoResponseObject); ok {
		if err := validResponse.VisitGetAutoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuto operation middleware
func (sh *strictHandler) PostAuto(w http.ResponseWriter, r *http.Request) {
	var request PostAutoRequestObject

	var body PostAutoJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuto(ctx, request.(PostAutoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuto")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAutoResponseObject); ok {
		if err := validResponse.VisitPostAutoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAutoInfo operation middleware
func (sh *strictHandler) GetAutoInfo(w http.ResponseWriter, r *http.Request, params GetAutoInfoParams) {
	var request GetAutoInfoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAutoInfo(ctx, request.(GetAutoInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAutoInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAutoInfoResponseObject); ok {
		if err := validResponse.VisitGetAutoInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAutoList operation middleware
func (sh *strictHandler) GetAutoList(w http.ResponseWriter, r *http.Request, params GetAutoListParams) {
	var request GetAutoListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAutoList(ctx, request.(GetAutoListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAutoList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAutoListResponseObject); ok {
		if err := validResponse.VisitGetAutoListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBreakage operation middleware
func (sh *strictHandler) PostBreakage(w http.ResponseWriter, r *http.Request) {
	var request PostBreakageRequestObject

	var body PostBreakageJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostBreakage(ctx, request.(PostBreakageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBreakage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostBreakageResponseObject); ok {
		if err := validResponse.VisitPostBreakageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBreakageList operation middleware
func (sh *strictHandler) GetBreakageList(w http.ResponseWriter, r *http.Request, params GetBreakageListParams) {
	var request GetBreakageListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBreakageList(ctx, request.(GetBreakageListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBreakageList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBreakageListResponseObject); ok {
		if err := validResponse.VisitGetBreakageListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDriver operation middleware
func (sh *strictHandler) PostDriver(w http.ResponseWriter, r *http.Request) {
	var request PostDriverRequestObject

	var body PostDriverJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDriver(ctx, request.(PostDriverRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDriver")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDriverResponseObject); ok {
		if err := validResponse.VisitPostDriverResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDriverInfo operation middleware
func (sh *strictHandler) GetDriverInfo(w http.ResponseWriter, r *http.Request, params GetDriverInfoParams) {
	var request GetDriverInfoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDriverInfo(ctx, request.(GetDriverInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDriverInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDriverInfoResponseObject); ok {
		if err := validResponse.VisitGetDriverInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDriverList operation middleware
func (sh *strictHandler) GetDriverList(w http.ResponseWriter, r *http.Request, params GetDriverListParams) {
	var request GetDriverListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDriverList(ctx, request.(GetDriverListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDriverList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDriverListResponseObject); ok {
		if err := validResponse.VisitGetDriverListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutDriverWorktime operation middleware
func (sh *strictHandler) PutDriverWorktime(w http.ResponseWriter, r *http.Request) {
	var request PutDriverWorktimeRequestObject

	var body PutDriverWorktimeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutDriverWorktime(ctx, request.(PutDriverWorktimeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutDriverWorktime")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutDriverWorktimeResponseObject); ok {
		if err := validResponse.VisitPutDriverWorktimeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(w http.ResponseWriter, r *http.Request) {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx, request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		if err := validResponse.VisitPostLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutMileage operation middleware
func (sh *strictHandler) PutMileage(w http.ResponseWriter, r *http.Request) {
	var request PutMileageRequestObject

	var body PutMileageJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutMileage(ctx, request.(PutMileageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutMileage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutMileageResponseObject); ok {
		if err := validResponse.VisitPutMileageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutNotificationAllstatus operation middleware
func (sh *strictHandler) PutNotificationAllstatus(w http.ResponseWriter, r *http.Request) {
	var request PutNotificationAllstatusRequestObject

	var body PutNotificationAllstatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutNotificationAllstatus(ctx, request.(PutNotificationAllstatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutNotificationAllstatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutNotificationAllstatusResponseObject); ok {
		if err := validResponse.VisitPutNotificationAllstatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNotificationInfo operation middleware
func (sh *strictHandler) GetNotificationInfo(w http.ResponseWriter, r *http.Request, params GetNotificationInfoParams) {
	var request GetNotificationInfoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNotificationInfo(ctx, request.(GetNotificationInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNotificationInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNotificationInfoResponseObject); ok {
		if err := validResponse.VisitGetNotificationInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNotificationList operation middleware
func (sh *strictHandler) GetNotificationList(w http.ResponseWriter, r *http.Request, params GetNotificationListParams) {
	var request GetNotificationListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNotificationList(ctx, request.(GetNotificationListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNotificationList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNotificationListResponseObject); ok {
		if err := validResponse.VisitGetNotificationListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutNotificationStatus operation middleware
func (sh *strictHandler) PutNotificationStatus(w http.ResponseWriter, r *http.Request) {
	var request PutNotificationStatusRequestObject

	var body PutNotificationStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutNotificationStatus(ctx, request.(PutNotificationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutNotificationStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutNotificationStatusResponseObject); ok {
		if err := validResponse.VisitPutNotificationStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPosition operation middleware
func (sh *strictHandler) PostPosition(w http.ResponseWriter, r *http.Request) {
	var request PostPositionRequestObject

	var body PostPositionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPosition(ctx, request.(PostPositionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPosition")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPositionResponseObject); ok {
		if err := validResponse.VisitPostPositionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPositionCarroute operation middleware
func (sh *strictHandler) GetPositionCarroute(w http.ResponseWriter, r *http.Request, params GetPositionCarrouteParams) {
	var request GetPositionCarrouteRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPositionCarroute(ctx, request.(GetPositionCarrouteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPositionCarroute")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPositionCarrouteResponseObject); ok {
		if err := validResponse.VisitGetPositionCarrouteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPositionListcurrent operation middleware
func (sh *strictHandler) GetPositionListcurrent(w http.ResponseWriter, r *http.Request, params GetPositionListcurrentParams) {
	var request GetPositionListcurrentRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPositionListcurrent(ctx, request.(GetPositionListcurrentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPositionListcurrent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPositionListcurrentResponseObject); ok {
		if err := validResponse.VisitGetPositionListcurrentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPositionsListcars operation middleware
func (sh *strictHandler) GetPositionsListcars(w http.ResponseWriter, r *http.Request, params GetPositionsListcarsParams) {
	var request GetPositionsListcarsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPositionsListcars(ctx, request.(GetPositionsListcarsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPositionsListcars")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPositionsListcarsResponseObject); ok {
		if err := validResponse.VisitGetPositionsListcarsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPressuredata operation middleware
func (sh *strictHandler) GetPressuredata(w http.ResponseWriter, r *http.Request, params GetPressuredataParams) {
	var request GetPressuredataRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPressuredata(ctx, request.(GetPressuredataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPressuredata")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPressuredataResponseObject); ok {
		if err := validResponse.VisitGetPressuredataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRefresh operation middleware
func (sh *strictHandler) PostRefresh(w http.ResponseWriter, r *http.Request) {
	var request PostRefreshRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRefresh(ctx, request.(PostRefreshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRefresh")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRefreshResponseObject); ok {
		if err := validResponse.VisitPostRefreshResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetReport operation middleware
func (sh *strictHandler) GetReport(w http.ResponseWriter, r *http.Request) {
	var request GetReportRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetReport(ctx, request.(GetReportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetReportResponseObject); ok {
		if err := validResponse.VisitGetReportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSensordata operation middleware
func (sh *strictHandler) PostSensordata(w http.ResponseWriter, r *http.Request) {
	var request PostSensordataRequestObject

	var body PostSensordataJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSensordata(ctx, request.(PostSensordataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSensordata")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSensordataResponseObject); ok {
		if err := validResponse.VisitPostSensordataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSensors operation middleware
func (sh *strictHandler) GetSensors(w http.ResponseWriter, r *http.Request, params GetSensorsParams) {
	var request GetSensorsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSensors(ctx, request.(GetSensorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSensors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSensorsResponseObject); ok {
		if err := validResponse.VisitGetSensorsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTemperaturedata operation middleware
func (sh *strictHandler) GetTemperaturedata(w http.ResponseWriter, r *http.Request, params GetTemperaturedataParams) {
	var request GetTemperaturedataRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTemperaturedata(ctx, request.(GetTemperaturedataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTemperaturedata")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTemperaturedataResponseObject); ok {
		if err := validResponse.VisitGetTemperaturedataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(w http.ResponseWriter, r *http.Request) {
	var request GetUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUser operation middleware
func (sh *strictHandler) PostUser(w http.ResponseWriter, r *http.Request) {
	var request PostUserRequestObject

	var body PostUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUser(ctx, request.(PostUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUserResponseObject); ok {
		if err := validResponse.VisitPostUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutUser operation middleware
func (sh *strictHandler) PutUser(w http.ResponseWriter, r *http.Request) {
	var request PutUserRequestObject

	var body PutUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutUser(ctx, request.(PutUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutUserResponseObject); ok {
		if err := validResponse.VisitPutUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWheels operation middleware
func (sh *strictHandler) GetWheels(w http.ResponseWriter, r *http.Request, params GetWheelsParams) {
	var request GetWheelsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWheels(ctx, request.(GetWheelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWheels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWheelsResponseObject); ok {
		if err := validResponse.VisitGetWheelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostWheels operation middleware
func (sh *strictHandler) PostWheels(w http.ResponseWriter, r *http.Request) {
	var request PostWheelsRequestObject

	var body PostWheelsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostWheels(ctx, request.(PostWheelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostWheels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostWheelsResponseObject); ok {
		if err := validResponse.VisitPostWheelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutWheels operation middleware
func (sh *strictHandler) PutWheels(w http.ResponseWriter, r *http.Request) {
	var request PutWheelsRequestObject

	var body PutWheelsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutWheels(ctx, request.(PutWheelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutWheels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutWheelsResponseObject); ok {
		if err := validResponse.VisitPutWheelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWheelsStateNumber operation middleware
func (sh *strictHandler) GetWheelsStateNumber(w http.ResponseWriter, r *http.Request, stateNumber string) {
	var request GetWheelsStateNumberRequestObject

	request.StateNumber = stateNumber

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWheelsStateNumber(ctx, request.(GetWheelsStateNumberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWheelsStateNumber")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWheelsStateNumberResponseObject); ok {
		if err := validResponse.VisitGetWheelsStateNumberResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
