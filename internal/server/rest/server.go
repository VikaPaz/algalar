// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AuthorizationScopes = "Authorization.Scopes"
)

// AutoRegistration defines model for AutoRegistration.
type AutoRegistration struct {
	AutoType    string `json:"AutoType"`
	AxleCount   int    `json:"axleCount"`
	Brand       string `json:"brand"`
	CompanyInn  string `json:"companyInn"`
	DeviceId    string `json:"deviceId"`
	StateNumber string `json:"stateNumber"`
	UniqueId    string `json:"uniqueId"`
}

// AutoResponse defines model for AutoResponse.
type AutoResponse struct {
	AutoType    *string `json:"AutoType,omitempty"`
	AxleCount   *int    `json:"axleCount,omitempty"`
	Brand       *string `json:"brand,omitempty"`
	CompanyInn  *string `json:"companyInn,omitempty"`
	DeviceId    *string `json:"deviceId,omitempty"`
	Id          *string `json:"id,omitempty"`
	StateNumber *string `json:"stateNumber,omitempty"`
	UniqueId    *string `json:"uniqueId,omitempty"`
}

// BreakageRegistration defines model for BreakageRegistration.
type BreakageRegistration struct {
	Datetime    *time.Time `json:"datetime,omitempty"`
	Description *string    `json:"description,omitempty"`
	StateNumber *string    `json:"stateNumber,omitempty"`
	Type        *string    `json:"type,omitempty"`
}

// BreakageResponse defines model for BreakageResponse.
type BreakageResponse struct {
	Datetime    *string `json:"datetime,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	StateNumber *string `json:"stateNumber,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// ReportResponse defines model for ReportResponse.
type ReportResponse = []byte

// SensorData defines model for SensorData.
type SensorData struct {
	Position    *int     `json:"position,omitempty"`
	Pressure    *float32 `json:"pressure,omitempty"`
	Temperature *float32 `json:"temperature,omitempty"`
	Time        *string  `json:"time,omitempty"`
}

// SensorRegistration defines model for SensorRegistration.
type SensorRegistration struct {
	CountAxis   *int     `json:"countAxis,omitempty"`
	Position    *int     `json:"position,omitempty"`
	Pressure    *float32 `json:"pressure,omitempty"`
	StateNumber *string  `json:"stateNumber,omitempty"`
	Temperature *float32 `json:"temperature,omitempty"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

// UpdatePassword defines model for UpdatePassword.
type UpdatePassword struct {
	NewPassword string `json:"newPassword"`
}

// UserDetails defines model for UserDetails.
type UserDetails struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Gender    *string `json:"gender,omitempty"`
	Inn       *string `json:"inn,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`
	TimeZone  *string `json:"timeZone,omitempty"`
}

// UserRegistration defines model for UserRegistration.
type UserRegistration struct {
	Email     string `json:"email"`
	FirstName string `json:"firstName"`
	Gender    string `json:"gender"`
	Inn       string `json:"inn"`
	LastName  string `json:"lastName"`
	Password  string `json:"password"`
	Phone     string `json:"phone"`
	TimeZone  string `json:"timeZone"`
}

// WheelChange defines model for WheelChange.
type WheelChange struct {
	AutoId         string  `json:"AutoId"`
	AxleNumber     int     `json:"axleNumber"`
	Id             string  `json:"id"`
	MaxPressure    float32 `json:"maxPressure"`
	MaxTemperature float32 `json:"maxTemperature"`
	Mileage        float32 `json:"mileage"`
	MinPressure    float32 `json:"minPressure"`
	MinTemperature float32 `json:"minTemperature"`
	Ngp            float32 `json:"ngp"`
	SensorNumber   string  `json:"sensorNumber"`
	TireBrand      string  `json:"tireBrand"`
	TireCost       float32 `json:"tireCost"`
	TireModel      string  `json:"tireModel"`
	TireSize       string  `json:"tireSize"`
	Tkvh           float32 `json:"tkvh"`
	WheelPosition  int     `json:"wheelPosition"`
}

// WheelRegistration defines model for WheelRegistration.
type WheelRegistration struct {
	AutoId         string  `json:"AutoId"`
	AxleNumber     int     `json:"axleNumber"`
	MaxPressure    float32 `json:"maxPressure"`
	MaxTemperature float32 `json:"maxTemperature"`
	Mileage        float32 `json:"mileage"`
	MinPressure    float32 `json:"minPressure"`
	MinTemperature float32 `json:"minTemperature"`
	Ngp            float32 `json:"ngp"`
	SensorNumber   string  `json:"sensorNumber"`
	TireBrand      string  `json:"tireBrand"`
	TireCost       float32 `json:"tireCost"`
	TireModel      string  `json:"tireModel"`
	TireSize       string  `json:"tireSize"`
	Tkvh           float32 `json:"tkvh"`
	WheelPosition  int     `json:"wheelPosition"`
}

// WheelResponse defines model for WheelResponse.
type WheelResponse struct {
	AutoId         *string  `json:"AutoId,omitempty"`
	AxleNumber     *int     `json:"axleNumber,omitempty"`
	Id             *string  `json:"id,omitempty"`
	MaxPressure    *float32 `json:"maxPressure,omitempty"`
	MaxTemperature *float32 `json:"maxTemperature,omitempty"`
	Mileage        *float32 `json:"mileage,omitempty"`
	MinPressure    *float32 `json:"minPressure,omitempty"`
	MinTemperature *float32 `json:"minTemperature,omitempty"`
	Ngp            *float32 `json:"ngp,omitempty"`
	SensorNumber   *string  `json:"sensorNumber,omitempty"`
	TireBrand      *string  `json:"tireBrand,omitempty"`
	TireCost       *float32 `json:"tireCost,omitempty"`
	TireModel      *string  `json:"tireModel,omitempty"`
	TireSize       *string  `json:"tireSize,omitempty"`
	Tkvh           *float32 `json:"tkvh,omitempty"`
	WheelPosition  *int     `json:"wheelPosition,omitempty"`
}

// GetAutoParams defines parameters for GetAuto.
type GetAutoParams struct {
	CarId string `form:"car_id" json:"car_id"`
}

// GetAutoInfoParams defines parameters for GetAutoInfo.
type GetAutoInfoParams struct {
	CarId string `form:"car_id" json:"car_id"`
}

// GetAutoListParams defines parameters for GetAutoList.
type GetAutoListParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetBreakagesParams defines parameters for GetBreakages.
type GetBreakagesParams struct {
	CarId string `form:"car_id" json:"car_id"`
}

// GetReportParams defines parameters for GetReport.
type GetReportParams struct {
	UserId string `form:"userId" json:"userId"`
}

// GetSensorParams defines parameters for GetSensor.
type GetSensorParams struct {
	CarId string `form:"car_id" json:"car_id"`
}

// GetWheelsParams defines parameters for GetWheels.
type GetWheelsParams struct {
	Id string `form:"id" json:"id"`
}

// PostAutoJSONRequestBody defines body for PostAuto for application/json ContentType.
type PostAutoJSONRequestBody = AutoRegistration

// PostBreakagesJSONRequestBody defines body for PostBreakages for application/json ContentType.
type PostBreakagesJSONRequestBody = BreakageRegistration

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// PostSensorJSONRequestBody defines body for PostSensor for application/json ContentType.
type PostSensorJSONRequestBody = SensorRegistration

// PutSensorJSONRequestBody defines body for PutSensor for application/json ContentType.
type PutSensorJSONRequestBody = SensorRegistration

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody = UserRegistration

// PutUserJSONRequestBody defines body for PutUser for application/json ContentType.
type PutUserJSONRequestBody = UpdatePassword

// PostWheelsJSONRequestBody defines body for PostWheels for application/json ContentType.
type PostWheelsJSONRequestBody = WheelRegistration

// PutWheelsJSONRequestBody defines body for PutWheels for application/json ContentType.
type PutWheelsJSONRequestBody = WheelChange

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a single Auto by ID
	// (GET /auto)
	GetAuto(w http.ResponseWriter, r *http.Request, params GetAutoParams)
	// Register a Auto
	// (POST /auto)
	PostAuto(w http.ResponseWriter, r *http.Request)
	// Get Auto and its wheels by car ID
	// (GET /auto/info)
	GetAutoInfo(w http.ResponseWriter, r *http.Request, params GetAutoInfoParams)
	// Get list of Autos
	// (GET /auto/list)
	GetAutoList(w http.ResponseWriter, r *http.Request, params GetAutoListParams)
	// Get breakages by car ID
	// (GET /breakages)
	GetBreakages(w http.ResponseWriter, r *http.Request, params GetBreakagesParams)
	// Register a new breakage
	// (POST /breakages)
	PostBreakages(w http.ResponseWriter, r *http.Request)
	// User login
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)
	// Refresh access token
	// (POST /refresh)
	PostRefresh(w http.ResponseWriter, r *http.Request)
	// Generate report
	// (GET /report)
	GetReport(w http.ResponseWriter, r *http.Request, params GetReportParams)
	// Get sensors by car ID
	// (GET /sensor)
	GetSensor(w http.ResponseWriter, r *http.Request, params GetSensorParams)
	// Register a new sensor
	// (POST /sensor)
	PostSensor(w http.ResponseWriter, r *http.Request)
	// Update an existing sensor
	// (PUT /sensor)
	PutSensor(w http.ResponseWriter, r *http.Request)
	// Get user details
	// (GET /user)
	GetUser(w http.ResponseWriter, r *http.Request)
	// User registration
	// (POST /user)
	PostUser(w http.ResponseWriter, r *http.Request)
	// Update user password
	// (PUT /user)
	PutUser(w http.ResponseWriter, r *http.Request)
	// Get wheel data
	// (GET /wheels)
	GetWheels(w http.ResponseWriter, r *http.Request, params GetWheelsParams)
	// Register a wheel
	// (POST /wheels)
	PostWheels(w http.ResponseWriter, r *http.Request)
	// Update wheel data
	// (PUT /wheels)
	PutWheels(w http.ResponseWriter, r *http.Request)
	// Get wheels by state number
	// (GET /wheels/{state_number})
	GetWheelsStateNumber(w http.ResponseWriter, r *http.Request, stateNumber string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get a single Auto by ID
// (GET /auto)
func (_ Unimplemented) GetAuto(w http.ResponseWriter, r *http.Request, params GetAutoParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a Auto
// (POST /auto)
func (_ Unimplemented) PostAuto(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Auto and its wheels by car ID
// (GET /auto/info)
func (_ Unimplemented) GetAutoInfo(w http.ResponseWriter, r *http.Request, params GetAutoInfoParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of Autos
// (GET /auto/list)
func (_ Unimplemented) GetAutoList(w http.ResponseWriter, r *http.Request, params GetAutoListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get breakages by car ID
// (GET /breakages)
func (_ Unimplemented) GetBreakages(w http.ResponseWriter, r *http.Request, params GetBreakagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new breakage
// (POST /breakages)
func (_ Unimplemented) PostBreakages(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User login
// (POST /login)
func (_ Unimplemented) PostLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Refresh access token
// (POST /refresh)
func (_ Unimplemented) PostRefresh(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Generate report
// (GET /report)
func (_ Unimplemented) GetReport(w http.ResponseWriter, r *http.Request, params GetReportParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get sensors by car ID
// (GET /sensor)
func (_ Unimplemented) GetSensor(w http.ResponseWriter, r *http.Request, params GetSensorParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new sensor
// (POST /sensor)
func (_ Unimplemented) PostSensor(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing sensor
// (PUT /sensor)
func (_ Unimplemented) PutSensor(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user details
// (GET /user)
func (_ Unimplemented) GetUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User registration
// (POST /user)
func (_ Unimplemented) PostUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user password
// (PUT /user)
func (_ Unimplemented) PutUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get wheel data
// (GET /wheels)
func (_ Unimplemented) GetWheels(w http.ResponseWriter, r *http.Request, params GetWheelsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a wheel
// (POST /wheels)
func (_ Unimplemented) PostWheels(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update wheel data
// (PUT /wheels)
func (_ Unimplemented) PutWheels(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get wheels by state number
// (GET /wheels/{state_number})
func (_ Unimplemented) GetWheelsStateNumber(w http.ResponseWriter, r *http.Request, stateNumber string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAuto operation middleware
func (siw *ServerInterfaceWrapper) GetAuto(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAutoParams

	// ------------- Required query parameter "car_id" -------------

	if paramValue := r.URL.Query().Get("car_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "car_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "car_id", r.URL.Query(), &params.CarId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "car_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuto(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuto operation middleware
func (siw *ServerInterfaceWrapper) PostAuto(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuto(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAutoInfo operation middleware
func (siw *ServerInterfaceWrapper) GetAutoInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAutoInfoParams

	// ------------- Required query parameter "car_id" -------------

	if paramValue := r.URL.Query().Get("car_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "car_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "car_id", r.URL.Query(), &params.CarId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "car_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAutoInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAutoList operation middleware
func (siw *ServerInterfaceWrapper) GetAutoList(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAutoListParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAutoList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBreakages operation middleware
func (siw *ServerInterfaceWrapper) GetBreakages(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBreakagesParams

	// ------------- Required query parameter "car_id" -------------

	if paramValue := r.URL.Query().Get("car_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "car_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "car_id", r.URL.Query(), &params.CarId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "car_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBreakages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostBreakages operation middleware
func (siw *ServerInterfaceWrapper) PostBreakages(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBreakages(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostRefresh(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReport operation middleware
func (siw *ServerInterfaceWrapper) GetReport(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReportParams

	// ------------- Required query parameter "userId" -------------

	if paramValue := r.URL.Query().Get("userId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "userId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "userId", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReport(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSensor operation middleware
func (siw *ServerInterfaceWrapper) GetSensor(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSensorParams

	// ------------- Required query parameter "car_id" -------------

	if paramValue := r.URL.Query().Get("car_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "car_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "car_id", r.URL.Query(), &params.CarId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "car_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSensor(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSensor operation middleware
func (siw *ServerInterfaceWrapper) PostSensor(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSensor(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutSensor operation middleware
func (siw *ServerInterfaceWrapper) PutSensor(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutSensor(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutUser operation middleware
func (siw *ServerInterfaceWrapper) PutUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWheels operation middleware
func (siw *ServerInterfaceWrapper) GetWheels(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWheelsParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWheels(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostWheels operation middleware
func (siw *ServerInterfaceWrapper) PostWheels(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostWheels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutWheels operation middleware
func (siw *ServerInterfaceWrapper) PutWheels(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, AuthorizationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutWheels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWheelsStateNumber operation middleware
func (siw *ServerInterfaceWrapper) GetWheelsStateNumber(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "state_number" -------------
	var stateNumber string

	err = runtime.BindStyledParameterWithOptions("simple", "state_number", chi.URLParam(r, "state_number"), &stateNumber, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state_number", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWheelsStateNumber(w, r, stateNumber)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auto", wrapper.GetAuto)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auto", wrapper.PostAuto)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auto/info", wrapper.GetAutoInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auto/list", wrapper.GetAutoList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/breakages", wrapper.GetBreakages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/breakages", wrapper.PostBreakages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.PostLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/refresh", wrapper.PostRefresh)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/report", wrapper.GetReport)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sensor", wrapper.GetSensor)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sensor", wrapper.PostSensor)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sensor", wrapper.PutSensor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user", wrapper.PostUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user", wrapper.PutUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wheels", wrapper.GetWheels)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/wheels", wrapper.PostWheels)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/wheels", wrapper.PutWheels)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wheels/{state_number}", wrapper.GetWheelsStateNumber)
	})

	return r
}

type GetAutoRequestObject struct {
	Params GetAutoParams
}

type GetAutoResponseObject interface {
	VisitGetAutoResponse(w http.ResponseWriter) error
}

type GetAuto200JSONResponse AutoResponse

func (response GetAuto200JSONResponse) VisitGetAutoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAutoRequestObject struct {
	Body *PostAutoJSONRequestBody
}

type PostAutoResponseObject interface {
	VisitPostAutoResponse(w http.ResponseWriter) error
}

type PostAuto200JSONResponse AutoResponse

func (response PostAuto200JSONResponse) VisitPostAutoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAutoInfoRequestObject struct {
	Params GetAutoInfoParams
}

type GetAutoInfoResponseObject interface {
	VisitGetAutoInfoResponse(w http.ResponseWriter) error
}

type GetAutoInfo200JSONResponse struct {
	Auto   *AutoResponse    `json:"auto,omitempty"`
	Wheels *[]WheelResponse `json:"wheels,omitempty"`
}

func (response GetAutoInfo200JSONResponse) VisitGetAutoInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAutoListRequestObject struct {
	Params GetAutoListParams
}

type GetAutoListResponseObject interface {
	VisitGetAutoListResponse(w http.ResponseWriter) error
}

type GetAutoList200JSONResponse []AutoResponse

func (response GetAutoList200JSONResponse) VisitGetAutoListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBreakagesRequestObject struct {
	Params GetBreakagesParams
}

type GetBreakagesResponseObject interface {
	VisitGetBreakagesResponse(w http.ResponseWriter) error
}

type GetBreakages200JSONResponse []BreakageResponse

func (response GetBreakages200JSONResponse) VisitGetBreakagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBreakagesRequestObject struct {
	Body *PostBreakagesJSONRequestBody
}

type PostBreakagesResponseObject interface {
	VisitPostBreakagesResponse(w http.ResponseWriter) error
}

type PostBreakages201JSONResponse BreakageResponse

func (response PostBreakages201JSONResponse) VisitPostBreakagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200JSONResponse TokenResponse

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRefreshRequestObject struct {
}

type PostRefreshResponseObject interface {
	VisitPostRefreshResponse(w http.ResponseWriter) error
}

type PostRefresh200JSONResponse TokenResponse

func (response PostRefresh200JSONResponse) VisitPostRefreshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetReportRequestObject struct {
	Params GetReportParams
}

type GetReportResponseObject interface {
	VisitGetReportResponse(w http.ResponseWriter) error
}

type GetReport200ApplicationvndOpenxmlformatsOfficedocumentSpreadsheetmlSheetResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetReport200ApplicationvndOpenxmlformatsOfficedocumentSpreadsheetmlSheetResponse) VisitGetReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetSensorRequestObject struct {
	Params GetSensorParams
}

type GetSensorResponseObject interface {
	VisitGetSensorResponse(w http.ResponseWriter) error
}

type GetSensor200JSONResponse []SensorData

func (response GetSensor200JSONResponse) VisitGetSensorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSensorRequestObject struct {
	Body *PostSensorJSONRequestBody
}

type PostSensorResponseObject interface {
	VisitPostSensorResponse(w http.ResponseWriter) error
}

type PostSensor201JSONResponse SensorData

func (response PostSensor201JSONResponse) VisitPostSensorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PutSensorRequestObject struct {
	Body *PutSensorJSONRequestBody
}

type PutSensorResponseObject interface {
	VisitPutSensorResponse(w http.ResponseWriter) error
}

type PutSensor200JSONResponse SensorData

func (response PutSensor200JSONResponse) VisitPutSensorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse UserDetails

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserRequestObject struct {
	Body *PostUserJSONRequestBody
}

type PostUserResponseObject interface {
	VisitPostUserResponse(w http.ResponseWriter) error
}

type PostUser200Response struct {
}

func (response PostUser200Response) VisitPostUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutUserRequestObject struct {
	Body *PutUserJSONRequestBody
}

type PutUserResponseObject interface {
	VisitPutUserResponse(w http.ResponseWriter) error
}

type PutUser200Response struct {
}

func (response PutUser200Response) VisitPutUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetWheelsRequestObject struct {
	Params GetWheelsParams
}

type GetWheelsResponseObject interface {
	VisitGetWheelsResponse(w http.ResponseWriter) error
}

type GetWheels200JSONResponse WheelResponse

func (response GetWheels200JSONResponse) VisitGetWheelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostWheelsRequestObject struct {
	Body *PostWheelsJSONRequestBody
}

type PostWheelsResponseObject interface {
	VisitPostWheelsResponse(w http.ResponseWriter) error
}

type PostWheels200JSONResponse WheelResponse

func (response PostWheels200JSONResponse) VisitPostWheelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutWheelsRequestObject struct {
	Body *PutWheelsJSONRequestBody
}

type PutWheelsResponseObject interface {
	VisitPutWheelsResponse(w http.ResponseWriter) error
}

type PutWheels200JSONResponse WheelResponse

func (response PutWheels200JSONResponse) VisitPutWheelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWheelsStateNumberRequestObject struct {
	StateNumber string `json:"state_number"`
}

type GetWheelsStateNumberResponseObject interface {
	VisitGetWheelsStateNumberResponse(w http.ResponseWriter) error
}

type GetWheelsStateNumber200JSONResponse []WheelResponse

func (response GetWheelsStateNumber200JSONResponse) VisitGetWheelsStateNumberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get a single Auto by ID
	// (GET /auto)
	GetAuto(ctx context.Context, request GetAutoRequestObject) (GetAutoResponseObject, error)
	// Register a Auto
	// (POST /auto)
	PostAuto(ctx context.Context, request PostAutoRequestObject) (PostAutoResponseObject, error)
	// Get Auto and its wheels by car ID
	// (GET /auto/info)
	GetAutoInfo(ctx context.Context, request GetAutoInfoRequestObject) (GetAutoInfoResponseObject, error)
	// Get list of Autos
	// (GET /auto/list)
	GetAutoList(ctx context.Context, request GetAutoListRequestObject) (GetAutoListResponseObject, error)
	// Get breakages by car ID
	// (GET /breakages)
	GetBreakages(ctx context.Context, request GetBreakagesRequestObject) (GetBreakagesResponseObject, error)
	// Register a new breakage
	// (POST /breakages)
	PostBreakages(ctx context.Context, request PostBreakagesRequestObject) (PostBreakagesResponseObject, error)
	// User login
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
	// Refresh access token
	// (POST /refresh)
	PostRefresh(ctx context.Context, request PostRefreshRequestObject) (PostRefreshResponseObject, error)
	// Generate report
	// (GET /report)
	GetReport(ctx context.Context, request GetReportRequestObject) (GetReportResponseObject, error)
	// Get sensors by car ID
	// (GET /sensor)
	GetSensor(ctx context.Context, request GetSensorRequestObject) (GetSensorResponseObject, error)
	// Register a new sensor
	// (POST /sensor)
	PostSensor(ctx context.Context, request PostSensorRequestObject) (PostSensorResponseObject, error)
	// Update an existing sensor
	// (PUT /sensor)
	PutSensor(ctx context.Context, request PutSensorRequestObject) (PutSensorResponseObject, error)
	// Get user details
	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// User registration
	// (POST /user)
	PostUser(ctx context.Context, request PostUserRequestObject) (PostUserResponseObject, error)
	// Update user password
	// (PUT /user)
	PutUser(ctx context.Context, request PutUserRequestObject) (PutUserResponseObject, error)
	// Get wheel data
	// (GET /wheels)
	GetWheels(ctx context.Context, request GetWheelsRequestObject) (GetWheelsResponseObject, error)
	// Register a wheel
	// (POST /wheels)
	PostWheels(ctx context.Context, request PostWheelsRequestObject) (PostWheelsResponseObject, error)
	// Update wheel data
	// (PUT /wheels)
	PutWheels(ctx context.Context, request PutWheelsRequestObject) (PutWheelsResponseObject, error)
	// Get wheels by state number
	// (GET /wheels/{state_number})
	GetWheelsStateNumber(ctx context.Context, request GetWheelsStateNumberRequestObject) (GetWheelsStateNumberResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAuto operation middleware
func (sh *strictHandler) GetAuto(w http.ResponseWriter, r *http.Request, params GetAutoParams) {
	var request GetAutoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuto(ctx, request.(GetAutoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuto")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAutoResponseObject); ok {
		if err := validResponse.VisitGetAutoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuto operation middleware
func (sh *strictHandler) PostAuto(w http.ResponseWriter, r *http.Request) {
	var request PostAutoRequestObject

	var body PostAutoJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuto(ctx, request.(PostAutoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuto")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAutoResponseObject); ok {
		if err := validResponse.VisitPostAutoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAutoInfo operation middleware
func (sh *strictHandler) GetAutoInfo(w http.ResponseWriter, r *http.Request, params GetAutoInfoParams) {
	var request GetAutoInfoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAutoInfo(ctx, request.(GetAutoInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAutoInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAutoInfoResponseObject); ok {
		if err := validResponse.VisitGetAutoInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAutoList operation middleware
func (sh *strictHandler) GetAutoList(w http.ResponseWriter, r *http.Request, params GetAutoListParams) {
	var request GetAutoListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAutoList(ctx, request.(GetAutoListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAutoList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAutoListResponseObject); ok {
		if err := validResponse.VisitGetAutoListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBreakages operation middleware
func (sh *strictHandler) GetBreakages(w http.ResponseWriter, r *http.Request, params GetBreakagesParams) {
	var request GetBreakagesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBreakages(ctx, request.(GetBreakagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBreakages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBreakagesResponseObject); ok {
		if err := validResponse.VisitGetBreakagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostBreakages operation middleware
func (sh *strictHandler) PostBreakages(w http.ResponseWriter, r *http.Request) {
	var request PostBreakagesRequestObject

	var body PostBreakagesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostBreakages(ctx, request.(PostBreakagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBreakages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostBreakagesResponseObject); ok {
		if err := validResponse.VisitPostBreakagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(w http.ResponseWriter, r *http.Request) {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx, request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		if err := validResponse.VisitPostLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRefresh operation middleware
func (sh *strictHandler) PostRefresh(w http.ResponseWriter, r *http.Request) {
	var request PostRefreshRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRefresh(ctx, request.(PostRefreshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRefresh")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRefreshResponseObject); ok {
		if err := validResponse.VisitPostRefreshResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetReport operation middleware
func (sh *strictHandler) GetReport(w http.ResponseWriter, r *http.Request, params GetReportParams) {
	var request GetReportRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetReport(ctx, request.(GetReportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetReportResponseObject); ok {
		if err := validResponse.VisitGetReportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSensor operation middleware
func (sh *strictHandler) GetSensor(w http.ResponseWriter, r *http.Request, params GetSensorParams) {
	var request GetSensorRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSensor(ctx, request.(GetSensorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSensor")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSensorResponseObject); ok {
		if err := validResponse.VisitGetSensorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSensor operation middleware
func (sh *strictHandler) PostSensor(w http.ResponseWriter, r *http.Request) {
	var request PostSensorRequestObject

	var body PostSensorJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSensor(ctx, request.(PostSensorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSensor")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSensorResponseObject); ok {
		if err := validResponse.VisitPostSensorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutSensor operation middleware
func (sh *strictHandler) PutSensor(w http.ResponseWriter, r *http.Request) {
	var request PutSensorRequestObject

	var body PutSensorJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutSensor(ctx, request.(PutSensorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutSensor")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutSensorResponseObject); ok {
		if err := validResponse.VisitPutSensorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(w http.ResponseWriter, r *http.Request) {
	var request GetUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUser operation middleware
func (sh *strictHandler) PostUser(w http.ResponseWriter, r *http.Request) {
	var request PostUserRequestObject

	var body PostUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUser(ctx, request.(PostUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUserResponseObject); ok {
		if err := validResponse.VisitPostUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutUser operation middleware
func (sh *strictHandler) PutUser(w http.ResponseWriter, r *http.Request) {
	var request PutUserRequestObject

	var body PutUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutUser(ctx, request.(PutUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutUserResponseObject); ok {
		if err := validResponse.VisitPutUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWheels operation middleware
func (sh *strictHandler) GetWheels(w http.ResponseWriter, r *http.Request, params GetWheelsParams) {
	var request GetWheelsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWheels(ctx, request.(GetWheelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWheels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWheelsResponseObject); ok {
		if err := validResponse.VisitGetWheelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostWheels operation middleware
func (sh *strictHandler) PostWheels(w http.ResponseWriter, r *http.Request) {
	var request PostWheelsRequestObject

	var body PostWheelsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostWheels(ctx, request.(PostWheelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostWheels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostWheelsResponseObject); ok {
		if err := validResponse.VisitPostWheelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutWheels operation middleware
func (sh *strictHandler) PutWheels(w http.ResponseWriter, r *http.Request) {
	var request PutWheelsRequestObject

	var body PutWheelsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutWheels(ctx, request.(PutWheelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutWheels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutWheelsResponseObject); ok {
		if err := validResponse.VisitPutWheelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWheelsStateNumber operation middleware
func (sh *strictHandler) GetWheelsStateNumber(w http.ResponseWriter, r *http.Request, stateNumber string) {
	var request GetWheelsStateNumberRequestObject

	request.StateNumber = stateNumber

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWheelsStateNumber(ctx, request.(GetWheelsStateNumberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWheelsStateNumber")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWheelsStateNumberResponseObject); ok {
		if err := validResponse.VisitGetWheelsStateNumberResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
